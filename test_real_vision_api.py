#!/usr/bin/env python3
"""
–ü—Ä—è–º–æ–π —Ç–µ—Å—Ç GPT-4 Vision API —Å —Ä–µ–∞–ª—å–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏–∑ PDF
"""

import sys
import base64
import openai
from dotenv import load_dotenv
from PIL import Image
import fitz  # PyMuPDF
import io

def test_vision_with_real_pdf():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç GPT-4 Vision API —Å —Ä–µ–∞–ª—å–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏–∑ PDF."""
    
    load_dotenv()
    client = openai.OpenAI()
    
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GPT-4 Vision API —Å —Ä–µ–∞–ª—å–Ω—ã–º PDF...")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º PDF
    pdf_path = "/home/vorontsovie/programming/math_textbooks/Copy (1) 1_klass_Arifmetika(1959)(Polyak_Pchelko).pdf"
    pdf_doc = fitz.open(pdf_path)
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    page = pdf_doc[0]
    pix = page.get_pixmap(matrix=fitz.Matrix(2.0, 2.0))  # 2x —É–≤–µ–ª–∏—á–µ–Ω–∏–µ
    img_data = pix.tobytes("png")
    
    # –ö–æ–¥–∏—Ä—É–µ–º –≤ base64
    b64_image = base64.b64encode(img_data).decode('utf-8')
    
    print(f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {len(img_data)} –±–∞–π—Ç")
    print(f"üîç Base64 —Ä–∞–∑–º–µ—Ä: {len(b64_image)} —Å–∏–º–≤–æ–ª–æ–≤")
    
    # –°–æ–∑–¥–∞—ë–º –ø—Ä–æ—Å—Ç–æ–π –ø—Ä–æ–º–ø—Ç
    prompt = """–ü–æ—Å–º–æ—Ç—Ä–∏ –Ω–∞ —ç—Ç—É —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–∑ —É—á–µ–±–Ω–∏–∫–∞ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏ –¥–ª—è 1 –∫–ª–∞—Å—Å–∞ 1959 –≥–æ–¥–∞.
    
–ù–∞–π–¥–∏ –≤—Å–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏ –Ω–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–∏ –≤–µ—Ä–Ω–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:

{
  "page_number": 1,
  "tasks": [
    {
      "task_number": "1", 
      "task_text": "—Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏",
      "has_image": true
    }
  ]
}

–ï—Å–ª–∏ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –Ω–µ –≤–∏–¥–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–π "unknown-1", "unknown-2" –∏ —Ç.–¥."""

    try:
        print("ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ GPT-4 Vision...")
        
        response = client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {
                    "role": "user", 
                    "content": [
                        {"type": "text", "text": prompt},
                        {"type": "image_url", "image_url": {"url": f"data:image/png;base64,{b64_image}"}}
                    ]
                }
            ],
            max_tokens=2000,
            temperature=0.1
        )
        
        print("‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        print(f"üéØ –ú–æ–¥–µ–ª—å: {response.model}")
        print(f"‚ö° –¢–æ–∫–µ–Ω—ã: {response.usage.total_tokens}")
        print(f"üìù –û—Ç–≤–µ—Ç:")
        print("-" * 50)
        print(response.choices[0].message.content)
        print("-" * 50)
        
        # –ü—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏—Ç—å JSON
        import json
        try:
            result = json.loads(response.choices[0].message.content)
            print(f"‚úÖ JSON –≤–∞–ª–∏–¥–µ–Ω: –Ω–∞–π–¥–µ–Ω–æ {len(result.get('tasks', []))} –∑–∞–¥–∞—á")
            
            for i, task in enumerate(result.get('tasks', []), 1):
                print(f"  {i}. {task.get('task_number', 'N/A')}: {task.get('task_text', 'N/A')[:50]}...")
                
        except json.JSONDecodeError:
            print("‚ö†Ô∏è  –û—Ç–≤–µ—Ç –Ω–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON, –Ω–æ API —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        pdf_doc.close()
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        pdf_doc.close()
        return False

if __name__ == "__main__":
    success = test_vision_with_real_pdf()
    if success:
        print("\nüéâ GPT-4 Vision API —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏!")
    else:
        print("\n‚ùå –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å API") 