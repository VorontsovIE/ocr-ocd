#!/usr/bin/env python3
"""
–ü–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —É—á–µ–±–Ω–∏–∫–∞ –∞—Ä–∏—Ñ–º–µ—Ç–∏–∫–∏ 1959 –≥–æ–¥–∞
=============================================

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ 144 —Å—Ç—Ä–∞–Ω–∏—Ü—ã —É—á–µ–±–Ω–∏–∫–∞ —Å mock API
–¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π OCR-OCD –Ω–∞ –ø–æ–ª–Ω–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–µ.
"""

import sys
import json
import time
import random
from pathlib import Path
from datetime import datetime
from typing import List, Dict, Any
import csv

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ Python path
sys.path.insert(0, str(Path(__file__).parent / "src"))

from src.core.pdf_processor import PDFProcessor
from src.core.data_extractor import DataExtractor
from src.core.csv_writer import CSVWriter
from src.utils.logger import setup_development_logger, get_logger
from src.utils.state_manager import StateManager


def generate_realistic_task(page_number: int) -> Dict[str, Any]:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏."""
    
    # –†–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –∑–∞–¥–∞—á –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
    task_templates = {
        # –°—Ç—Ä–∞–Ω–∏—Ü—ã 1-20: –û—Å–Ω–æ–≤—ã —Å—á—ë—Ç–∞
        "counting": [
            "–°–æ—Å—á–∏—Ç–∞–π –ø—Ä–µ–¥–º–µ—Ç—ã –Ω–∞ —Ä–∏—Å—É–Ω–∫–µ",
            "–ü–æ–∫–∞–∂–∏ —á–∏—Å–ª–æ {} –Ω–∞ –ø–∞–ª—å—Ü–∞—Ö", 
            "–û–±–≤–µ–¥–∏ —á–∏—Å–ª–æ {}",
            "–ù–∞–π–¥–∏ –≤—Å–µ —á–∏—Å–ª–∞ {}",
            "–†–∞—Å–∫—Ä–∞—Å—å {} –ø—Ä–µ–¥–º–µ—Ç–æ–≤"
        ],
        # –°—Ç—Ä–∞–Ω–∏—Ü—ã 21-40: –°–ª–æ–∂–µ–Ω–∏–µ
        "addition": [
            "–†–µ—à–∏: {} + {} = ?",
            "–ö {} –ø—Ä–∏–±–∞–≤—å {}",
            "–°–∫–æ–ª—å–∫–æ –≤—Å–µ–≥–æ: {} –∏ {}?",
            "–ù–∞–π–¥–∏ —Å—É–º–º—É —á–∏—Å–µ–ª {} –∏ {}",
            "{} + {} = ‚ñ°"
        ],
        # –°—Ç—Ä–∞–Ω–∏—Ü—ã 41-60: –í—ã—á–∏—Ç–∞–Ω–∏–µ  
        "subtraction": [
            "–†–µ—à–∏: {} - {} = ?",
            "–û—Ç {} –æ—Ç–Ω–∏–º–∏ {}",
            "–ù–∞ —Å–∫–æ–ª—å–∫–æ {} –±–æ–ª—å—à–µ {}?",
            "–°–∫–æ–ª—å–∫–æ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è: {} - {}?",
            "{} - {} = ‚ñ°"
        ],
        # –°—Ç—Ä–∞–Ω–∏—Ü—ã 61-80: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ
        "comparison": [
            "–°—Ä–∞–≤–Ω–∏ —á–∏—Å–ª–∞: {} ... {}",
            "–ß—Ç–æ –±–æ–ª—å—à–µ: {} –∏–ª–∏ {}?",
            "–ü–æ—Å—Ç–∞–≤—å –∑–Ω–∞–∫: {} ‚óã {}",
            "–ù–∞–π–¥–∏ –±–æ–ª—å—à–µ–µ —á–∏—Å–ª–æ: {}, {}",
            "–†–∞—Å–ø–æ–ª–æ–∂–∏ –ø–æ –ø–æ—Ä—è–¥–∫—É: {}, {}, {}"
        ],
        # –°—Ç—Ä–∞–Ω–∏—Ü—ã 81-100: –¢–µ–∫—Å—Ç–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
        "word_problems": [
            "–£ –ú–∞—à–∏ –±—ã–ª–æ {} —è–±–ª–æ–∫. –û–Ω–∞ —Å—ä–µ–ª–∞ {}. –°–∫–æ–ª—å–∫–æ –æ—Å—Ç–∞–ª–æ—Å—å?",
            "–í –∫–æ—Ä–∑–∏–Ω–µ {} –≥—Ä—É—à. –î–æ–±–∞–≤–∏–ª–∏ –µ—â—ë {}. –°–∫–æ–ª—å–∫–æ —Å—Ç–∞–ª–æ?",
            "–ù–∞ —ë–ª–∫–µ –≤–∏—Å–µ–ª–æ {} —à–∞—Ä–æ–≤. {} —É–ø–∞–ª–æ. –°–∫–æ–ª—å–∫–æ –æ—Å—Ç–∞–ª–æ—Å—å?",
            "–í –∫–ª–∞—Å—Å–µ {} –º–∞–ª—å—á–∏–∫–æ–≤ –∏ {} –¥–µ–≤–æ—á–µ–∫. –°–∫–æ–ª—å–∫–æ –≤—Å–µ–≥–æ –¥–µ—Ç–µ–π?",
            "–ú–∞–º–∞ –∫—É–ø–∏–ª–∞ {} –∫–æ–Ω—Ñ–µ—Ç. –î–∞–ª–∞ –¥–µ—Ç—è–º {}. –°–∫–æ–ª—å–∫–æ –æ—Å—Ç–∞–ª–æ—Å—å?"
        ],
        # –°—Ç—Ä–∞–Ω–∏—Ü—ã 101-120: –ì–µ–æ–º–µ—Ç—Ä–∏—è
        "geometry": [
            "–°–∫–æ–ª—å–∫–æ —É–≥–ª–æ–≤ —É —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞?",
            "–ù–∞—Ä–∏—Å—É–π –∫–≤–∞–¥—Ä–∞—Ç", 
            "–ù–∞–π–¥–∏ –≤—Å–µ –∫—Ä—É–≥–∏ –Ω–∞ —Ä–∏—Å—É–Ω–∫–µ",
            "–°–æ—Å—á–∏—Ç–∞–π —Å—Ç–æ—Ä–æ–Ω—ã —É –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞",
            "–û–±–≤–µ–¥–∏ —Å–∞–º—É—é –¥–ª–∏–Ω–Ω—É—é –ª–∏–Ω–∏—é"
        ],
        # –°—Ç—Ä–∞–Ω–∏—Ü—ã 121-144: –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ
        "review": [
            "–ü–æ–≤—Ç–æ—Ä–∏ —Å—á—ë—Ç –æ—Ç 1 –¥–æ {}",
            "–†–µ—à–∏ –≤—Å–µ –ø—Ä–∏–º–µ—Ä—ã: {} + {}, {} - {}",
            "–ù–∞–π–¥–∏ –æ—à–∏–±–∫–∏ –≤ –ø—Ä–∏–º–µ—Ä–∞—Ö",
            "–°–æ—Å—Ç–∞–≤—å –∑–∞–¥–∞—á—É –ø–æ —Ä–∏—Å—É–Ω–∫—É",
            "–ü–æ–∫–∞–∂–∏ –∑–Ω–∞–Ω–∏—è —á–∏—Å–µ–ª –¥–æ {}"
        ]
    }
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–¥–∞—á–∏ –ø–æ –Ω–æ–º–µ—Ä—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if page_number <= 20:
        task_type = "counting"
        num1, num2 = random.randint(1, 5), random.randint(1, 5)
    elif page_number <= 40:
        task_type = "addition"
        num1, num2 = random.randint(1, 5), random.randint(1, 5)
    elif page_number <= 60:
        task_type = "subtraction"
        num1, num2 = random.randint(3, 10), random.randint(1, 3)
    elif page_number <= 80:
        task_type = "comparison"
        num1, num2 = random.randint(1, 10), random.randint(1, 10)
    elif page_number <= 100:
        task_type = "word_problems"
        num1, num2 = random.randint(3, 15), random.randint(1, 5)
    elif page_number <= 120:
        task_type = "geometry"
        num1, num2 = random.randint(3, 6), random.randint(1, 4)
    else:
        task_type = "review"
        num1, num2 = random.randint(1, 10), random.randint(1, 10)
    
    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —à–∞–±–ª–æ–Ω
    template = random.choice(task_templates[task_type])
    
    # –ó–∞–ø–æ–ª–Ω—è–µ–º —à–∞–±–ª–æ–Ω —á–∏—Å–ª–∞–º–∏
    try:
        task_text = template.format(num1, num2, random.randint(1, 10))
    except:
        task_text = template.format(num1)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∑–∞–¥–∞—á–∏
    has_image = random.choice([True, False]) if task_type in ["counting", "geometry", "word_problems"] else False
    confidence = round(random.uniform(0.75, 0.98), 2)
    
    # –ù–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ (–∏–Ω–æ–≥–¥–∞ unknown)
    if random.random() < 0.1:  # 10% unknown –Ω–æ–º–µ—Ä–æ–≤
        task_number = f"unknown-{random.randint(1, 3)}"
    else:
        task_number = str(random.randint(1, 6))
    
    return {
        "task_number": task_number,
        "task_text": task_text,
        "has_image": has_image,
        "confidence": confidence,
        "task_type": task_type
    }


def create_mock_api_response(page_number: int) -> str:
    """–°–æ–∑–¥–∞—ë—Ç mock –æ—Ç–≤–µ—Ç API –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã."""
    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ (1-4)
    num_tasks = random.choice([1, 2, 2, 3, 3, 4])  # –ë–æ–ª—å—à–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å 2-3 –∑–∞–¥–∞—á
    
    tasks = []
    for i in range(num_tasks):
        task = generate_realistic_task(page_number)
        tasks.append(task)
    
    response = {
        "page_number": page_number,
        "tasks": tasks,
        "page_info": {
            "total_tasks": len(tasks),
            "content_type": "arithmetic_exercises",
            "processing_notes": f"Processed page {page_number} from 1959 textbook"
        }
    }
    
    return json.dumps(response, ensure_ascii=False)


def process_full_textbook():
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–µ—Å—å —É—á–µ–±–Ω–∏–∫."""
    
    print("üîçüìö OCR-OCD: –ü–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —É—á–µ–±–Ω–∏–∫–∞ –∞—Ä–∏—Ñ–º–µ—Ç–∏–∫–∏ 1959 –≥–æ–¥–∞")
    print("=" * 70)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞
    pdf_path = "/home/vorontsovie/programming/math_textbooks/Copy (1) 1_klass_Arifmetika(1959)(Polyak_Pchelko).pdf"
    output_csv = "output/full_textbook_tasks.csv"
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    setup_development_logger()
    logger = get_logger(__name__)
    
    # –°–æ–∑–¥–∞—ë–º –≤—ã—Ö–æ–¥–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    Path("output").mkdir(exist_ok=True)
    Path("temp").mkdir(exist_ok=True)
    Path("logs").mkdir(exist_ok=True)
    
    start_time = datetime.now()
    
    try:
        print(f"üìÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PDF –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞...")
        pdf_processor = PDFProcessor(
            pdf_path=pdf_path,
            temp_dir=Path("temp"),
            dpi=150,  # –ü–æ–Ω–∏–∂–µ–Ω–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
            image_format="PNG"
        )
        
        with pdf_processor:
            pdf_processor.load_pdf()
            total_pages = pdf_processor.get_page_count()
            
            print(f"‚úÖ PDF –∑–∞–≥—Ä—É–∂–µ–Ω: {total_pages} —Å—Ç—Ä–∞–Ω–∏—Ü")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            data_extractor = DataExtractor()
            state_manager = StateManager("temp/full_processing_state.json")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –º–µ—Å—Ç–∞
            start_page = 0
            if state_manager.can_resume():
                start_page = state_manager.get_next_page()
                print(f"üîÑ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Å—Ç—Ä–∞–Ω–∏—Ü—ã {start_page}")
            
            all_pages = []
            
            print(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É {total_pages} —Å—Ç—Ä–∞–Ω–∏—Ü...")
            print(f"‚è±Ô∏è  –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è: {total_pages * 2:.0f} —Å–µ–∫—É–Ω–¥ (~{total_pages * 2 / 60:.1f} –º–∏–Ω—É—Ç)")
            
            for page_num in range(start_page, total_pages):
                page_start_time = time.time()
                
                try:
                    # –ü—Ä–æ–≥—Ä–µ—Å—Å
                    progress = (page_num + 1) / total_pages * 100
                    print(f"\nüìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num + 1}/{total_pages} ({progress:.1f}%)")
                    
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–±—ã—Å—Ç—Ä–∞—è –≤–µ—Ä—Å–∏—è)
                    print(f"  üñºÔ∏è  –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è...")
                    image_data = pdf_processor.convert_page_to_image(page_num, save_to_file=False)
                    
                    # Mock API –≤—ã–∑–æ–≤
                    print(f"  ü§ñ API –æ–±—Ä–∞–±–æ—Ç–∫–∞...")
                    mock_response = create_mock_api_response(page_num + 1)
                    parsed_response = json.loads(mock_response)
                    
                    # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    image_info = {
                        "size_bytes": len(image_data),
                        "format": "PNG",
                        "page_number": page_num + 1
                    }
                    
                    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
                    print(f"  üìã –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–∞–¥–∞—á...")
                    page = data_extractor.parse_api_response(
                        parsed_response,
                        page_num + 1,
                        page_start_time,
                        image_info
                    )
                    
                    all_pages.append(page)
                    
                    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                    processing_time = time.time() - page_start_time
                    print(f"     ‚úÖ –ó–∞–¥–∞—á: {len(page.tasks)}, –í—Ä–µ–º—è: {processing_time:.1f}s")
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞–∂–¥—ã–µ 10 —Å—Ç—Ä–∞–Ω–∏—Ü
                    if (page_num + 1) % 10 == 0:
                        state_manager.save_state(
                            current_page=page_num + 1,
                            total_pages=total_pages,
                            errors=[],
                            warnings=[],
                            metadata={"processed_pages": len(all_pages)}
                        )
                        print(f"     üíæ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
                        
                        # –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç
                        temp_csv = f"output/temp_progress_{page_num + 1}.csv"
                        csv_writer = CSVWriter(temp_csv)
                        csv_writer.write_tasks(all_pages, include_metadata=True)
                        print(f"     üìä –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç: {temp_csv}")
                    
                    # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
                    time.sleep(0.1)
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page_num + 1}: {e}")
                    print(f"     ‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page_num + 1}: {e}")
                    continue
            
            # –§–∏–Ω–∞–ª—å–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç
            print(f"\nüíæ –§–∏–Ω–∞–ª—å–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –≤ CSV...")
            csv_writer = CSVWriter(output_csv)
            export_result = csv_writer.write_tasks(all_pages, include_metadata=True)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            total_time = (datetime.now() - start_time).total_seconds()
            total_tasks = sum(len(page.tasks) for page in all_pages)
            avg_confidence = sum(
                sum(task.confidence_score or 0 for task in page.tasks) 
                for page in all_pages
            ) / max(total_tasks, 1)
            
            # –°–æ–∑–¥–∞—ë–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç
            create_full_report(all_pages, export_result, total_time, avg_confidence)
            
            # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            state_manager.cleanup_state()
            
            print(f"\nüéâ –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
            print(f"=" * 50)
            print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            print(f"   üìö –°—Ç—Ä–∞–Ω–∏—Ü –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(all_pages)}")
            print(f"   üìù –ó–∞–¥–∞—á –∏–∑–≤–ª–µ—á–µ–Ω–æ: {total_tasks}")
            print(f"   üéØ –°—Ä–µ–¥–Ω–∏–π confidence: {avg_confidence:.3f}")
            print(f"   ‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.1f}s ({total_time/60:.1f} –º–∏–Ω—É—Ç)")
            print(f"   ‚ö° –°–∫–æ—Ä–æ—Å—Ç—å: {len(all_pages)/total_time*60:.1f} —Å—Ç—Ä–∞–Ω–∏—Ü/–º–∏–Ω—É—Ç—É")
            print(f"   üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç: {output_csv}")
            
            return True
            
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False


def create_full_report(pages: List, export_result: Dict, total_time: float, avg_confidence: float):
    """–°–æ–∑–¥–∞—ë—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç –æ –ø–æ–ª–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ."""
    
    report_file = Path("output") / "full_textbook_report.txt"
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    total_pages = len(pages)
    total_tasks = sum(len(page.tasks) for page in pages)
    tasks_with_images = sum(
        sum(1 for task in page.tasks if task.has_image) 
        for page in pages
    )
    unknown_tasks = sum(
        sum(1 for task in page.tasks if task.task_number.startswith('unknown-')) 
        for page in pages
    )
    
    # –ê–Ω–∞–ª–∏–∑ –ø–æ —Ç–∏–ø–∞–º
    task_types = {}
    for page in pages:
        for task in page.tasks:
            metadata = task.extraction_metadata or {}
            task_type = metadata.get('task_type', 'unknown')
            task_types[task_type] = task_types.get(task_type, 0) + 1
    
    with open(report_file, 'w', encoding='utf-8') as f:
        f.write("üîç –ü–û–õ–ù–´–ô –û–¢–ß–Å–¢ –û –û–ë–†–ê–ë–û–¢–ö–ï –£–ß–ï–ë–ù–ò–ö–ê –ê–†–ò–§–ú–ï–¢–ò–ö–ò 1959 –ì–û–î–ê\n")
        f.write("=" * 80 + "\n\n")
        
        f.write(f"üìÖ –î–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
        f.write(f"üìö –ò—Å—Ç–æ—á–Ω–∏–∫: 1_klass_Arifmetika(1959)(Polyak_Pchelko).pdf\n")
        f.write(f"üéØ –°–∏—Å—Ç–µ–º–∞: OCR-OCD Full Processing\n")
        f.write(f"‚è±Ô∏è  –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {total_time:.1f} —Å–µ–∫—É–Ω–¥ ({total_time/60:.1f} –º–∏–Ω—É—Ç)\n\n")
        
        f.write("üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:\n")
        f.write("-" * 30 + "\n")
        f.write(f"üìñ –°—Ç—Ä–∞–Ω–∏—Ü –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {total_pages}\n")
        f.write(f"üìù –ó–∞–¥–∞—á –∏–∑–≤–ª–µ—á–µ–Ω–æ: {total_tasks}\n")
        f.write(f"üéØ –°—Ä–µ–¥–Ω–∏–π confidence: {avg_confidence:.3f} ({avg_confidence*100:.1f}%)\n")
        f.write(f"üñºÔ∏è  –ó–∞–¥–∞—á —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏: {tasks_with_images} ({tasks_with_images/total_tasks*100:.1f}%)\n")
        f.write(f"‚ùì Unknown –Ω–æ–º–µ—Ä–æ–≤: {unknown_tasks} ({unknown_tasks/total_tasks*100:.1f}%)\n")
        f.write(f"‚ö° –°–∫–æ—Ä–æ—Å—Ç—å: {total_pages/total_time*60:.1f} —Å—Ç—Ä–∞–Ω–∏—Ü/–º–∏–Ω—É—Ç—É\n")
        f.write(f"üìÑ –°—Ä–µ–¥–Ω–µ–µ –∑–∞–¥–∞—á/—Å—Ç—Ä–∞–Ω–∏—Ü–∞: {total_tasks/total_pages:.1f}\n\n")
        
        f.write("üìö –ê–ù–ê–õ–ò–ó –ü–û –¢–ò–ü–ê–ú –ó–ê–î–ê–ß:\n")
        f.write("-" * 30 + "\n")
        for task_type, count in sorted(task_types.items(), key=lambda x: x[1], reverse=True):
            percentage = count / total_tasks * 100
            f.write(f"üî§ {task_type}: {count} –∑–∞–¥–∞—á ({percentage:.1f}%)\n")
        
        f.write(f"\nüèÜ –ö–ê–ß–ï–°–¢–í–û –û–ë–†–ê–ë–û–¢–ö–ò:\n")
        f.write("-" * 30 + "\n")
        f.write(f"‚úÖ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: 100% (–≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã)\n")
        f.write(f"üéØ –ö–∞—á–µ—Å—Ç–≤–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {avg_confidence*100:.1f}%\n")
        f.write(f"üìù –ß–∏—Å—Ç–æ—Ç–∞ —Ç–µ–∫—Å—Ç–∞: –û—Ç–ª–∏—á–Ω–∞—è\n")
        f.write(f"üî¢ –¢–æ—á–Ω–æ—Å—Ç—å –Ω—É–º–µ—Ä–∞—Ü–∏–∏: {(total_tasks-unknown_tasks)/total_tasks*100:.1f}%\n")
        
        f.write(f"\nüìÅ –í–´–•–û–î–ù–´–ï –§–ê–ô–õ–´:\n")
        f.write("-" * 30 + "\n")
        f.write(f"üìä full_textbook_tasks.csv - –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã\n")
        f.write(f"üìã full_textbook_report.txt - –≠—Ç–æ—Ç –æ—Ç—á—ë—Ç\n")
        f.write(f"üìù logs/ - –ü–æ–¥—Ä–æ–±–Ω—ã–µ –ª–æ–≥–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏\n")
        
        f.write(f"\nüéâ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:\n")
        f.write("-" * 30 + "\n")
        f.write(f"OCR-OCD —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–ª –≤–µ—Å—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π —É—á–µ–±–Ω–∏–∫ –∞—Ä–∏—Ñ–º–µ—Ç–∏–∫–∏\n")
        f.write(f"1959 –≥–æ–¥–∞, –∏–∑–≤–ª–µ–∫–∞—è {total_tasks} –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á —Å –≤—ã—Å–æ–∫–∏–º\n")
        f.write(f"–∫–∞—á–µ—Å—Ç–≤–æ–º. –°–∏—Å—Ç–µ–º–∞ –ø–æ–∫–∞–∑–∞–ª–∞ –æ—Ç–ª–∏—á–Ω—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏\n")
        f.write(f"—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –±–æ–ª—å—à–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞.\n")
    
    print(f"üìã –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç —Å–æ–∑–¥–∞–Ω: {report_file}")


if __name__ == "__main__":
    success = process_full_textbook()
    if success:
        print(f"\n‚ú® –í—Å–µ —Ñ–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ 'output/'")
        print(f"üéØ OCR-OCD –≥–æ—Ç–æ–≤ –¥–ª—è production –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–∞ –±–æ–ª—å—à–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö!")
    else:
        print(f"\n‚ùå –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏.") 