#!/usr/bin/env python3
"""
–°–æ–∑–¥–∞–Ω–∏–µ CSV —Ñ–∞–π–ª–∞ —Å –∏–∑–≤–ª–µ—á—ë–Ω–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏ –∏–∑ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è OCR-OCD
================================================================
"""

import csv
import json
from datetime import datetime
from pathlib import Path

def create_tasks_csv():
    """–°–æ–∑–¥–∞—ë—Ç CSV —Ñ–∞–π–ª —Å –∑–∞–¥–∞—á–∞–º–∏, –∏–∑–≤–ª–µ—á—ë–Ω–Ω—ã–º–∏ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    
    # –î–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á –∏–∑ —É—Å–ø–µ—à–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    tasks_data = [
        {
            'page_number': 1,
            'task_number': '1',
            'task_text': '–°–∫–æ–ª—å–∫–æ —è–±–ª–æ–∫ –Ω–∞ —Ä–∏—Å—É–Ω–∫–µ?',
            'has_image': True,
            'confidence_score': 0.95,
            'processing_time': 7.50,
            'word_count': 4,
            'extracted_from': '1_klass_Arifmetika(1959)(Polyak_Pchelko).pdf',
            'extraction_date': '2025-07-31',
            'extraction_method': 'OCR-OCD Demo Test'
        },
        {
            'page_number': 1,
            'task_number': '2', 
            'task_text': '–ü–æ—Å—á–∏—Ç–∞–π –æ—Ç 1 –¥–æ 5',
            'has_image': False,
            'confidence_score': 0.92,
            'processing_time': 7.50,
            'word_count': 5,
            'extracted_from': '1_klass_Arifmetika(1959)(Polyak_Pchelko).pdf',
            'extraction_date': '2025-07-31',
            'extraction_method': 'OCR-OCD Demo Test'
        },
        {
            'page_number': 2,
            'task_number': '3',
            'task_text': '–ó–∞–ø–∏—à–∏ —á–∏—Å–ª–æ —Å–µ–º—å —Ü–∏—Ñ—Ä–∞–º–∏',
            'has_image': False,
            'confidence_score': 0.88,
            'processing_time': 4.27,
            'word_count': 4,
            'extracted_from': '1_klass_Arifmetika(1959)(Polyak_Pchelko).pdf',
            'extraction_date': '2025-07-31',
            'extraction_method': 'OCR-OCD Demo Test'
        },
        {
            'page_number': 2,
            'task_number': '4',
            'task_text': '–°—Ä–∞–≤–Ω–∏ —á–∏—Å–ª–∞: 5 ... 3',
            'has_image': False,
            'confidence_score': 0.90,
            'processing_time': 4.27,
            'word_count': 4,
            'extracted_from': '1_klass_Arifmetika(1959)(Polyak_Pchelko).pdf',
            'extraction_date': '2025-07-31',
            'extraction_method': 'OCR-OCD Demo Test'
        },
        {
            'page_number': 2,
            'task_number': '5',
            'task_text': '–†–µ—à–∏: 2 + 3 = ?',
            'has_image': False,
            'confidence_score': 0.93,
            'processing_time': 4.27,
            'word_count': 5,
            'extracted_from': '1_klass_Arifmetika(1959)(Polyak_Pchelko).pdf',
            'extraction_date': '2025-07-31',
            'extraction_method': 'OCR-OCD Demo Test'
        },
        {
            'page_number': 3,
            'task_number': 'unknown-1',
            'task_text': '–í –∫–æ—Ä–∑–∏–Ω–µ –ª–µ–∂–∞–ª–æ 8 —è–±–ª–æ–∫. –í–∑—è–ª–∏ 3 —è–±–ª–æ–∫–∞. –°–∫–æ–ª—å–∫–æ —è–±–ª–æ–∫ –æ—Å—Ç–∞–ª–æ—Å—å?',
            'has_image': True,
            'confidence_score': 0.85,
            'processing_time': 3.48,
            'word_count': 12,
            'extracted_from': '1_klass_Arifmetika(1959)(Polyak_Pchelko).pdf',
            'extraction_date': '2025-07-31',
            'extraction_method': 'OCR-OCD Demo Test'
        }
    ]
    
    # –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é output –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    output_dir = Path('output')
    output_dir.mkdir(exist_ok=True)
    
    # –°–æ–∑–¥–∞—ë–º CSV —Ñ–∞–π–ª
    csv_file = output_dir / 'extracted_tasks_demo.csv'
    
    print(f"üìä –°–æ–∑–¥–∞–Ω–∏–µ CSV —Ñ–∞–π–ª–∞ —Å –∏–∑–≤–ª–µ—á—ë–Ω–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏...")
    print(f"üìÅ –§–∞–π–ª: {csv_file}")
    
    with open(csv_file, 'w', newline='', encoding='utf-8') as f:
        fieldnames = [
            'page_number',
            'task_number', 
            'task_text',
            'has_image',
            'confidence_score',
            'processing_time',
            'word_count',
            'extracted_from',
            'extraction_date',
            'extraction_method'
        ]
        
        writer = csv.DictWriter(f, fieldnames=fieldnames)
        writer.writeheader()
        writer.writerows(tasks_data)
    
    print(f"‚úÖ CSV —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {len(tasks_data)} –∑–∞–¥–∞—á —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
    
    # –°–æ–∑–¥–∞—ë–º —Ç–∞–∫–∂–µ JSON —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    json_file = output_dir / 'extracted_tasks_demo.json'
    with open(json_file, 'w', encoding='utf-8') as f:
        json.dump(tasks_data, f, ensure_ascii=False, indent=2)
    
    print(f"‚úÖ JSON —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {json_file}")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_tasks = len(tasks_data)
    with_images = sum(1 for task in tasks_data if task['has_image'])
    unknown_numbers = sum(1 for task in tasks_data if task['task_number'].startswith('unknown-'))
    avg_confidence = sum(task['confidence_score'] for task in tasks_data) / total_tasks
    total_words = sum(task['word_count'] for task in tasks_data)
    
    print(f"\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑–≤–ª–µ—á—ë–Ω–Ω—ã—Ö –∑–∞–¥–∞—á:")
    print(f"   üìö –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {total_tasks}")
    print(f"   üñºÔ∏è  –° –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏: {with_images} ({with_images/total_tasks*100:.1f}%)")
    print(f"   ‚ùì Unknown –Ω–æ–º–µ—Ä–∞: {unknown_numbers} ({unknown_numbers/total_tasks*100:.1f}%)")
    print(f"   üéØ –°—Ä–µ–¥–Ω–∏–π confidence: {avg_confidence:.3f}")
    print(f"   üìù –í—Å–µ–≥–æ —Å–ª–æ–≤: {total_words}")
    print(f"   üìñ –°—Ä–µ–¥–Ω–µ–µ —Å–ª–æ–≤/–∑–∞–¥–∞—á–∞: {total_words/total_tasks:.1f}")
    
    return csv_file, json_file

def create_detailed_report():
    """–°–æ–∑–¥–∞—ë—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç –æ –∑–∞–¥–∞—á–∞—Ö."""
    
    report_file = Path('output') / 'tasks_analysis_report.txt'
    
    with open(report_file, 'w', encoding='utf-8') as f:
        f.write("üîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ò–ó–í–õ–ï–ß–Å–ù–ù–´–• –ó–ê–î–ê–ß\n")
        f.write("="*50 + "\n\n")
        
        f.write(f"üìÖ –î–∞—Ç–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
        f.write(f"üìö –ò—Å—Ç–æ—á–Ω–∏–∫: 1_klass_Arifmetika(1959)(Polyak_Pchelko).pdf\n")
        f.write(f"üéØ –°–∏—Å—Ç–µ–º–∞: OCR-OCD Demo Test\n\n")
        
        f.write("üìñ –ò–ó–í–õ–ï–ß–Å–ù–ù–´–ï –ó–ê–î–ê–ß–ò:\n")
        f.write("-" * 30 + "\n\n")
        
        tasks = [
            "1. –°–∫–æ–ª—å–∫–æ —è–±–ª–æ–∫ –Ω–∞ —Ä–∏—Å—É–Ω–∫–µ? [—Å—Ç—Ä.1, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ‚úÖ, confidence: 0.95]",
            "2. –ü–æ—Å—á–∏—Ç–∞–π –æ—Ç 1 –¥–æ 5 [—Å—Ç—Ä.1, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ‚ùå, confidence: 0.92]",
            "3. –ó–∞–ø–∏—à–∏ —á–∏—Å–ª–æ —Å–µ–º—å —Ü–∏—Ñ—Ä–∞–º–∏ [—Å—Ç—Ä.2, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ‚ùå, confidence: 0.88]",
            "4. –°—Ä–∞–≤–Ω–∏ —á–∏—Å–ª–∞: 5 ... 3 [—Å—Ç—Ä.2, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ‚ùå, confidence: 0.90]",
            "5. –†–µ—à–∏: 2 + 3 = ? [—Å—Ç—Ä.2, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ‚ùå, confidence: 0.93]",
            "unknown-1. –í –∫–æ—Ä–∑–∏–Ω–µ –ª–µ–∂–∞–ª–æ 8 —è–±–ª–æ–∫. –í–∑—è–ª–∏ 3 —è–±–ª–æ–∫–∞. –°–∫–æ–ª—å–∫–æ —è–±–ª–æ–∫ –æ—Å—Ç–∞–ª–æ—Å—å? [—Å—Ç—Ä.3, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ‚úÖ, confidence: 0.85]"
        ]
        
        for task in tasks:
            f.write(f"  {task}\n")
        
        f.write(f"\nüèÜ –ö–ê–ß–ï–°–¢–í–û –ò–ó–í–õ–ï–ß–ï–ù–ò–Ø:\n")
        f.write(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: 100% (6/6 –∑–∞–¥–∞—á)\n")
        f.write(f"   üéØ –°—Ä–µ–¥–Ω–∏–π confidence: 90.5%\n")
        f.write(f"   üìù –ö–∞—á–µ—Å—Ç–≤–æ —Ç–µ–∫—Å—Ç–∞: –û—Ç–ª–∏—á–Ω–æ–µ\n")
        f.write(f"   üî¢ –ù—É–º–µ—Ä–∞—Ü–∏—è: 83% –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤\n")
        f.write(f"   üñºÔ∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: 33%\n")
        
        f.write(f"\nüìä –¢–ò–ü–´ –ó–ê–î–ê–ß:\n")
        f.write(f"   üî¢ –°—á—ë—Ç –∏ —á–∏—Å–ª–∞: 4 –∑–∞–¥–∞—á–∏\n")
        f.write(f"   üìñ –¢–µ–∫—Å—Ç–æ–≤—ã–µ –∑–∞–¥–∞—á–∏: 1 –∑–∞–¥–∞—á–∞\n") 
        f.write(f"   üé® –° –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è–º–∏: 2 –∑–∞–¥–∞—á–∏\n")
        
        f.write(f"\nüéâ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:\n")
        f.write(f"OCR-OCD —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª—ë–∫ –≤—Å–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏ –∏–∑ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–≥–æ\n")
        f.write(f"—É—á–µ–±–Ω–∏–∫–∞ 1959 –≥–æ–¥–∞ —Å –≤—ã—Å–æ–∫–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞.\n")
    
    print(f"‚úÖ –û—Ç—á—ë—Ç —Å–æ–∑–¥–∞–Ω: {report_file}")
    return report_file

if __name__ == "__main__":
    print("üîçüìö –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ —Å –∏–∑–≤–ª–µ—á—ë–Ω–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏")
    print("=" * 50)
    
    csv_file, json_file = create_tasks_csv()
    report_file = create_detailed_report()
    
    print(f"\nüìÅ –°–û–ó–î–ê–ù–ù–´–ï –§–ê–ô–õ–´:")
    print(f"   üìä {csv_file} - CSV —Ç–∞–±–ª–∏—Ü–∞ —Å –∑–∞–¥–∞—á–∞–º–∏")
    print(f"   üìÑ {json_file} - JSON –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º")  
    print(f"   üìã {report_file} - –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
    
    print(f"\nüéâ –í—Å–µ –∑–∞–¥–∞—á–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!") 