#!/usr/bin/env python3
"""
OCR-OCD Pure Vision: –¢–æ–ª—å–∫–æ GPT-4 Vision
=========================================

–ü—Ä–æ—Å—Ç–∞—è –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞:
- üìñ PDF ‚Üí –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü
- üñºÔ∏è GPT-4 Vision ‚Üí –∞–Ω–∞–ª–∏–∑ –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–∞–¥–∞—á
- üìä CSV ‚Üí —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã

–ë–µ–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–µ–π —Å –≤–Ω–µ—à–Ω–∏–º–∏ OCR —Å–∏—Å—Ç–µ–º–∞–º–∏!
"""

import sys
import json
import time
import click
from pathlib import Path
from datetime import datetime
from typing import List, Dict, Any, Optional

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ Python path
sys.path.insert(0, str(Path(__file__).parent / "src"))

from src.utils.logger import setup_development_logger, setup_production_logger, get_logger
from src.core.pdf_processor import PDFProcessor
from src.core.vision_client import VisionClient
from src.core.data_extractor import DataExtractor
from src.utils.config import load_config


class PureVisionExtractor:
    """–ß–∏—Å—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞: —Ç–æ–ª—å–∫–æ GPT-4 Vision –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π."""
    
    def __init__(self, pdf_path: str, config_path: str = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Pure Vision —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä–∞.
        
        Args:
            pdf_path: –ü—É—Ç—å –∫ PDF —Ñ–∞–π–ª—É
            config_path: –ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
        """
        self.logger = get_logger(__name__)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        self.config = load_config(config_path)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.pdf_processor = PDFProcessor(pdf_path)
        self.vision_client = VisionClient(self.config.api)
        self.data_extractor = DataExtractor()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º PDF
        self.pdf_processor.load_pdf()
        
        self.logger.info(f"Pure Vision extractor initialized: {pdf_path}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
        try:
            api_available = self.vision_client.test_api_connection()
            self.logger.info(f"GPT-4 Vision API status: {'‚úÖ Available' if api_available else '‚ùå Unavailable'}")
            self.api_available = api_available
        except Exception as e:
            self.logger.warning(f"GPT-4 Vision API test failed: {e}")
            self.api_available = False
    
    def extract_tasks_from_page(self, page_number: int) -> Dict[str, Any]:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∑–∞–¥–∞—á–∏ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ–ª—å–∫–æ GPT-4 Vision.
        
        Args:
            page_number: –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (1-based)
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
        """
        start_time = time.time()
        
        try:
            if not self.api_available:
                return {
                    "page_number": page_number,
                    "tasks": [],
                    "processing_time": time.time() - start_time,
                    "method": "pure_vision_api_unavailable",
                    "error": "GPT-4 Vision API –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω"
                }
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            page_image = self.pdf_processor.get_page_image(page_number - 1)  # 0-based index
            
            if not page_image:
                return {
                    "page_number": page_number,
                    "tasks": [],
                    "processing_time": time.time() - start_time,
                    "method": "pure_vision_no_image",
                    "error": f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page_number}"
                }
            
            # –°–æ–∑–¥–∞—ë–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á
            math_prompt = self._create_math_prompt()
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ GPT-4 Vision
            self.logger.debug(f"Analyzing page {page_number} with Pure GPT-4 Vision")
            
            api_result = self.vision_client.extract_tasks_from_page(
                page_image=page_image,
                page_number=page_number,
                custom_prompt=math_prompt
            )
            
            if not api_result.get('success', False):
                return {
                    "page_number": page_number,
                    "tasks": [],
                    "processing_time": time.time() - start_time,
                    "method": "pure_vision_api_failed",
                    "error": f"Vision API failed: {api_result.get('error', 'Unknown error')}"
                }
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–¥–∞—á–∏ –∏–∑ –æ—Ç–≤–µ—Ç–∞ GPT
            tasks = self.data_extractor.extract_tasks_from_response(
                api_result.get('response', {}),
                page_number
            )
            
            # –û–±–æ–≥–∞—â–∞–µ–º –∑–∞–¥–∞—á–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏ Pure Vision
            for i, task in enumerate(tasks, 1):
                task.update({
                    'task_number': f"vision-{page_number}-{i}",
                    'extraction_method': 'pure_vision_gpt4',
                    'vision_api_used': True,
                    'api_model': self.config.api.model_name,
                    'processing_confidence': self._calculate_vision_confidence(task, api_result),
                    'pure_vision': True
                })
            
            processing_time = time.time() - start_time
            
            self.logger.debug(f"Pure Vision extracted {len(tasks)} tasks from page {page_number}")
            
            return {
                "page_number": page_number,
                "tasks": tasks,
                "processing_time": processing_time,
                "method": "pure_vision_success",
                "api_model": self.config.api.model_name,
                "image_processed": True,
                "json_valid": api_result.get('json_valid', False),
                "api_response_time": api_result.get('processing_time', 0)
            }
            
        except Exception as e:
            self.logger.error(f"Error extracting tasks from page {page_number}: {e}")
            return {
                "page_number": page_number,
                "tasks": [],
                "processing_time": time.time() - start_time,
                "method": "pure_vision_error",
                "error": str(e)
            }
    
    def _create_math_prompt(self) -> str:
        """–°–æ–∑–¥–∞—ë—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á."""
        
        return """–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç—É —Å—Ç—Ä–∞–Ω–∏—Ü—É –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É—á–µ–±–Ω–∏–∫–∞ –¥–ª—è 1 –∫–ª–∞—Å—Å–∞ –∏ –∏–∑–≤–ª–µ–∫–∏ –í–°–ï –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏ –∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è.

üéØ –¢–í–û–Ø –ó–ê–î–ê–ß–ê:
–ù–∞–π–¥–∏ –∏ –∏–∑–≤–ª–µ–∫–∏ –∫–∞–∂–¥—É—é –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∑–∞–¥–∞—á—É, –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ.

üìù –ß–¢–û –ò–°–ö–ê–¢–¨:
‚Ä¢ –í–æ–ø—Ä–æ—Å—ã: "–°–∫–æ–ª—å–∫–æ...?", "–ì–¥–µ...?", "–ß—Ç–æ...?", "–ö–∞–∫...?"
‚Ä¢ –ö–æ–º–∞–Ω–¥—ã: "–ü–æ–∫–∞–∂–∏...", "–ù–∞–π–¥–∏...", "–†–µ—à–∏...", "–ü–æ–ª–æ–∂–∏...", "–ù–∞—Ä–∏—Å—É–π..."
‚Ä¢ –ü—Ä–∏–º–µ—Ä—ã: –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è (2+3, 5-1)
‚Ä¢ –°—Ä–∞–≤–Ω–µ–Ω–∏—è: "–±–æ–ª—å—à–µ/–º–µ–Ω—å—à–µ", "–¥–ª–∏–Ω–Ω–µ–µ/–∫–æ—Ä–æ—á–µ"
‚Ä¢ –°—á—ë—Ç: "–ø–æ—Å—á–∏—Ç–∞–π...", "—Å–æ—Å—á–∏—Ç–∞–π..."
‚Ä¢ –ó–∞–¥–∞—á–∏ —Å–æ —Å–ª–æ–≤–∞–º–∏: —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏

üîç –ò–ù–°–¢–†–£–ö–¶–ò–ò:
1. –ß–∏—Ç–∞–π –í–°–Å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ
2. –ö–∞–∂–¥–∞—è –æ—Ç–¥–µ–ª—å–Ω–∞—è –∑–∞–¥–∞—á–∞ = –æ—Ç–¥–µ–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
3. –í–∫–ª—é—á–∞–π –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏
4. –ï—Å–ª–∏ –≤–∏–¥–∏—à—å —Ä–∏—Å—É–Ω–∫–∏/—Å—Ö–µ–º—ã –∫ –∑–∞–¥–∞—á–µ - –æ—Ç–º–µ—Ç—å has_image: true

üìä –§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê (—Å—Ç—Ä–æ–≥–æ JSON):
{
  "tasks": [
    {
      "task_number": "1",
      "task_text": "–ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –∏–ª–∏ –≤–æ–ø—Ä–æ—Å–∞",
      "has_image": true/false
    },
    {
      "task_number": "2", 
      "task_text": "—Å–ª–µ–¥—É—é—â–∞—è –∑–∞–¥–∞—á–∞...",
      "has_image": true/false
    }
  ]
}

‚ú® –í–ê–ñ–ù–û: –î–∞–∂–µ –µ—Å–ª–∏ –∑–∞–¥–∞—á–∞ –∫–∞–∂–µ—Ç—Å—è –ø—Ä–æ—Å—Ç–æ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–°–∫–æ–ª—å–∫–æ —è–±–ª–æ–∫?"), –≤—Å—ë —Ä–∞–≤–Ω–æ –≤–∫–ª—é—á–∞–π –µ—ë –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç!"""
    
    def _calculate_vision_confidence(self, task: Dict[str, Any], api_result: Dict[str, Any]) -> float:
        """–í—ã—á–∏—Å–ª—è–µ—Ç confidence score –¥–ª—è Pure Vision."""
        
        confidence = 0.7  # –ë–∞–∑–æ–≤—ã–π confidence –¥–ª—è Vision API
        
        # –ë–æ–Ω—É—Å –∑–∞ —É—Å–ø–µ—à–Ω—ã–π JSON –ø–∞—Ä—Å–∏–Ω–≥
        if api_result.get('json_valid', False):
            confidence += 0.15
        
        # –ë–æ–Ω—É—Å –∑–∞ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        task_text = task.get('task_text', '').lower()
        math_keywords = ['—Å–∫–æ–ª—å–∫–æ', '–Ω–∞–π–¥–∏', '—Ä–µ—à–∏', '–ø–æ–∫–∞–∂–∏', '–ø–æ–ª–æ–∂–∏', '–ø–æ—Å—á–∏—Ç–∞–π', '?', '+', '-', '=']
        keyword_count = sum(1 for keyword in math_keywords if keyword in task_text)
        confidence += min(keyword_count * 0.03, 0.15)
        
        # –®—Ç—Ä–∞—Ñ –∑–∞ –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–µ —Ç–µ–∫—Å—Ç—ã
        if len(task_text) < 10:
            confidence -= 0.1
        
        return min(max(confidence, 0.0), 1.0)


class PureVisionStorage:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –¥–ª—è Pure Vision."""
    
    def __init__(self, storage_dir: Path):
        self.storage_dir = storage_dir
        self.storage_dir.mkdir(parents=True, exist_ok=True)
        
    def save_page_result(self, page_number: int, page_data: Dict[str, Any]) -> None:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç Pure Vision –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã."""
        file_path = self.storage_dir / f"pure_vision_page_{page_number:03d}.json"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ Pure Vision
        page_data.update({
            'processed_at': datetime.now().isoformat(),
            'page_number': page_number,
            'storage_version': '4.0-pure-vision',
            'architecture': 'pure_gpt4_vision'
        })
        
        with open(file_path, 'w', encoding='utf-8') as f:
            json.dump(page_data, f, ensure_ascii=False, indent=2)
    
    def load_page_result(self, page_number: int) -> Optional[Dict[str, Any]]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç Pure Vision –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã."""
        file_path = self.storage_dir / f"pure_vision_page_{page_number:03d}.json"
        
        if not file_path.exists():
            return None
            
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                return json.load(f)
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Pure Vision —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page_number}: {e}")
            return None
    
    def get_processed_pages(self) -> List[int]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–æ–º–µ—Ä–æ–≤ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü."""
        processed = []
        
        for file_path in sorted(self.storage_dir.glob("pure_vision_page_*.json")):
            try:
                page_num = int(file_path.stem.split('_')[3])
                processed.append(page_num)
            except (ValueError, IndexError):
                continue
                
        return sorted(processed)
    
    def load_all_results(self) -> List[Dict[str, Any]]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ Pure Vision —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã."""
        results = []
        
        for page_num in self.get_processed_pages():
            page_data = self.load_page_result(page_num)
            if page_data:
                results.append(page_data)
        
        return results
    
    def clear_storage(self) -> None:
        """–û—á–∏—â–∞–µ—Ç –≤—Å–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ñ–∞–π–ª—ã Pure Vision."""
        for file_path in self.storage_dir.glob("pure_vision_page_*.json"):
            file_path.unlink()


@click.command()
@click.argument('pdf_file', type=click.Path(exists=True))
@click.argument('output_csv', type=click.Path())
@click.option('--force', is_flag=True, help='–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã')
@click.option('--start-page', type=int, default=1, help='–ù–∞—á–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏')
@click.option('--end-page', type=int, default=None, help='–ö–æ–Ω–µ—á–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏')
@click.option('--production', is_flag=True, help='Production —Ä–µ–∂–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è')
@click.option('--verbose', is_flag=True, help='–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥')
@click.option('--config', type=click.Path(exists=True), help='–ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É')
def process_textbook_pure_vision(pdf_file, output_csv, force, start_page, end_page, production, verbose, config):
    """
    OCR-OCD Pure Vision: –¢–æ–ª—å–∫–æ GPT-4 Vision –∞–Ω–∞–ª–∏–∑.
    
    –ü—Ä–æ—Å—Ç–∞—è –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞:
    - PDF ‚Üí –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü ‚Üí GPT-4 Vision ‚Üí CSV
    """
    
    print("üöÄüñºÔ∏è OCR-OCD Pure Vision: GPT-4 Vision Only")
    print("=" * 50)
    print(f"üìñ PDF —Ñ–∞–π–ª: {pdf_file}")
    print(f"üìä –í—ã–≤–æ–¥: {output_csv}")
    print(f"üîÑ Force —Ä–µ–∂–∏–º: {'‚úÖ' if force else '‚ùå'}")
    print(f"üéØ –ß–∏—Å—Ç—ã–π –ø–æ–¥—Ö–æ–¥: —Ç–æ–ª—å–∫–æ GPT-4 Vision")
    print(f"‚ú® –ë–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    if production:
        setup_production_logger()
    else:
        setup_development_logger()
    
    logger = get_logger(__name__)
    
    # –°–æ–∑–¥–∞—ë–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    paths = {
        'output': Path("output"),
        'temp': Path("temp"), 
        'logs': Path("logs"),
        'storage': Path("temp/processed_pages_pure_vision")
    }
    
    for path in paths.values():
        path.mkdir(parents=True, exist_ok=True)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Pure Vision —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    storage = PureVisionStorage(paths['storage'])
    
    if force:
        print("üóëÔ∏è  Force —Ä–µ–∂–∏–º: –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
        storage.clear_storage()
    
    start_time = datetime.now()
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Pure Vision —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä–∞
        print(f"üñºÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Pure Vision —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä–∞...")
        extractor = PureVisionExtractor(pdf_file, config)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ PDF
        total_pages = extractor.pdf_processor.get_page_count()
        
        if end_page is None:
            end_page = total_pages
        else:
            end_page = min(end_page, total_pages)
        
        print(f"‚úÖ Pure Vision —Å–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        print(f"üìö PDF: {total_pages} —Å—Ç—Ä–∞–Ω–∏—Ü")
        print(f"üéØ –û–±—Ä–∞–±–æ—Ç–∫–∞: —Å—Ç—Ä–∞–Ω–∏—Ü—ã {start_page}-{end_page}")
        print(f"üñºÔ∏è GPT-4 Vision API: {'‚úÖ Available' if extractor.api_available else '‚ùå Unavailable'}")
        
        if not extractor.api_available:
            print("‚ùå GPT-4 Vision API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ.")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        processed_pages = set(storage.get_processed_pages())
        
        if processed_pages and not force:
            print(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(processed_pages)} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü")
            print(f"üìä –ü–æ—Å–ª–µ–¥–Ω—è—è: {max(processed_pages) if processed_pages else 'none'}")
        
        # –°—á—ë—Ç—á–∏–∫–∏
        processed_count = 0
        skipped_count = 0 
        error_count = 0
        total_tasks = 0
        api_calls = 0
        total_api_time = 0
        
        print(f"\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º Pure Vision –æ–±—Ä–∞–±–æ—Ç–∫—É...")
        
        for page_num in range(start_page, end_page + 1):
            page_start_time = time.time()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É
            if not force and page_num in processed_pages:
                skipped_count += 1
                if verbose:
                    print(f"‚è≠Ô∏è  –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num}: –ø—Ä–æ–ø—É—â–µ–Ω–∞ (—É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞)")
                continue
            
            try:
                progress = (page_num - start_page + 1) / (end_page - start_page + 1) * 100
                print(f"\nüìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num}/{end_page} ({progress:.1f}%)")
                
                # Pure Vision –æ–±—Ä–∞–±–æ—Ç–∫–∞
                if verbose:
                    print(f"  üñºÔ∏è Pure Vision –∞–Ω–∞–ª–∏–∑...")
                
                result = extractor.extract_tasks_from_page(page_num)
                
                if 'error' in result:
                    error_count += 1
                    print(f"     ‚ùå –û—à–∏–±–∫–∞: {result['error']}")
                    continue
                
                tasks = result['tasks']
                method = result.get('method', 'unknown')
                api_time = result.get('api_response_time', 0)
                json_valid = result.get('json_valid', False)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á—ë—Ç—á–∏–∫–∏
                if result.get('image_processed', False):
                    api_calls += 1
                    total_api_time += api_time
                
                if verbose:
                    print(f"  ‚úÖ Pure Vision –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω")
                    print(f"  üéØ –ú–µ—Ç–æ–¥: {method}")
                    print(f"  üìä JSON –≤–∞–ª–∏–¥–Ω—ã–π: {'‚úÖ' if json_valid else '‚ùå'}")
                    print(f"  ‚è±Ô∏è API –≤—Ä–µ–º—è: {api_time:.2f}s")
                
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                page_result = {
                    'page_number': page_num,
                    'tasks': tasks,
                    'processing_time': result['processing_time'],
                    'method': method,
                    'api_model': result.get('api_model', 'unknown'),
                    'json_valid': json_valid,
                    'api_response_time': api_time,
                    'task_count': len(tasks)
                }
                
                storage.save_page_result(page_num, page_result)
                
                processed_count += 1
                total_tasks += len(tasks)
                
                processing_time = time.time() - page_start_time
                print(f"     ‚úÖ –ó–∞–¥–∞—á: {len(tasks)}, –í—Ä–µ–º—è: {processing_time:.2f}s")
                
                if verbose and tasks:
                    for i, task in enumerate(tasks[:3], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                        confidence = task.get('processing_confidence', 0)
                        print(f"       {i}. [conf:{confidence:.2f}] {task['task_number']}: {task['task_text'][:50]}...")
                
                # –ü–∞—É–∑–∞ –¥–ª—è API
                time.sleep(0.5)  # –†–∞–∑—É–º–Ω–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                
            except Exception as e:
                logger.error(f"Error processing page {page_num}: {e}")
                print(f"     ‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page_num}: {e}")
                error_count += 1
                continue
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π —Å–±–æ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        print(f"\nüíæ –°–±–æ—Ä —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö Pure Vision —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
        all_results = storage.load_all_results()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ CSV
        if all_results:
            print(f"üìä –°–æ–∑–¥–∞–Ω–∏–µ Pure Vision CSV —Ñ–∞–π–ª–∞...")
            create_pure_vision_csv(all_results, output_csv)
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_time = (datetime.now() - start_time).total_seconds()
        avg_api_time = total_api_time / api_calls if api_calls > 0 else 0
        
        print(f"\nüéâ PURE VISION –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
        print(f"=" * 50)
        print(f"üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   üìö –°—Ç—Ä–∞–Ω–∏—Ü –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed_count}")
        print(f"   ‚è≠Ô∏è  –°—Ç—Ä–∞–Ω–∏—Ü –ø—Ä–æ–ø—É—â–µ–Ω–æ: {skipped_count}")
        print(f"   ‚ùå –û—à–∏–±–æ–∫: {error_count}")
        print(f"   üìù –ó–∞–¥–∞—á –∏–∑–≤–ª–µ—á–µ–Ω–æ: {total_tasks}")
        print(f"   üî• API –≤—ã–∑–æ–≤–æ–≤: {api_calls}")
        print(f"   ‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.1f}s ({total_time/60:.1f} –º–∏–Ω—É—Ç)")
        print(f"   ‚ö° –°—Ä–µ–¥–Ω–µ–µ API –≤—Ä–µ–º—è: {avg_api_time:.2f}s")
        if processed_count > 0:
            print(f"   üìà –°—Ä–µ–¥–Ω–µ–µ –∑–∞–¥–∞—á/—Å—Ç—Ä–∞–Ω–∏—Ü–∞: {total_tasks/processed_count:.1f}")
            print(f"   üí∞ –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${api_calls * 0.01:.2f}")
        
        print(f"\nüìÅ Pure Vision CSV: {output_csv}")
        print(f"üéØ –ú–µ—Ç–æ–¥: –¢–æ–ª—å–∫–æ GPT-4 Vision")
        print(f"‚ú® –ß–∏—Å—Ç—ã–π –ø–æ–¥—Ö–æ–¥ –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
        
        return True
        
    except Exception as e:
        logger.error(f"Critical Pure Vision error: {e}")
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ Pure Vision: {e}")
        return False


def create_pure_vision_csv(results: List[Dict], output_path: str) -> None:
    """–°–æ–∑–¥–∞—ë—Ç Pure Vision CSV —Ñ–∞–π–ª –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤."""
    
    all_tasks = []
    
    for page_result in results:
        page_num = page_result['page_number']
        processing_time = page_result.get('processing_time', 0)
        method = page_result.get('method', 'unknown')
        api_model = page_result.get('api_model', 'unknown')
        json_valid = page_result.get('json_valid', False)
        api_response_time = page_result.get('api_response_time', 0)
        
        for task_data in page_result.get('tasks', []):
            task_row = {
                'page_number': page_num,
                'task_number': task_data.get('task_number', 'unknown'),
                'task_text': task_data.get('task_text', ''),
                'has_image': task_data.get('has_image', False),
                'processing_confidence': task_data.get('processing_confidence', 0.0),
                'processing_time': processing_time,
                'api_method': method,
                'api_model': api_model,
                'extraction_method': task_data.get('extraction_method', 'pure_vision_gpt4'),
                'vision_api_used': task_data.get('vision_api_used', True),
                'pure_vision': task_data.get('pure_vision', True),
                'json_valid': json_valid,
                'api_response_time': api_response_time,
                'extracted_at': page_result.get('processed_at', ''),
                'word_count': len(task_data.get('task_text', '').split()),
                'system_type': 'pure_gpt4_vision',
                'architecture': 'pdf_to_image_to_gpt4_vision'
            }
            all_tasks.append(task_row)
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –Ω–æ–º–µ—Ä—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
    all_tasks.sort(key=lambda x: (x['page_number'], -x['processing_confidence']))
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º CSV
    import csv
    with open(output_path, 'w', newline='', encoding='utf-8') as f:
        if all_tasks:
            fieldnames = list(all_tasks[0].keys())
            writer = csv.DictWriter(f, fieldnames=fieldnames)
            writer.writeheader()
            writer.writerows(all_tasks)
    
    print(f"‚úÖ Pure Vision CSV —Å–æ–∑–¥–∞–Ω: {len(all_tasks)} –∑–∞–¥–∞—á —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
    print(f"üìä –ü–æ–ª—è: pure_vision, processing_confidence, api_model, json_valid")


if __name__ == "__main__":
    process_textbook_pure_vision() 