#!/usr/bin/env python3
"""
OCR-OCD Usage Examples
======================

–≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è OCR-OCD –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤.
"""

import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ Python path –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.insert(0, str(Path(__file__).parent.parent / "src"))

from src.utils.config import load_config
from src.core.pdf_processor import PDFProcessor
from src.core.vision_client import VisionClient
from src.core.data_extractor import DataExtractor
from src.core.csv_writer import CSVWriter
from src.utils.logger import setup_development_logger, get_logger


def example_basic_usage():
    """
    –ü—Ä–∏–º–µ—Ä 1: –ë–∞–∑–æ–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ CLI
    
    –≠—Ç–æ —Å–∞–º—ã–π –ø—Ä–æ—Å—Ç–æ–π —Å–ø–æ—Å–æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è OCR-OCD.
    """
    print("=== –ü—Ä–∏–º–µ—Ä 1: –ë–∞–∑–æ–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ ===")
    
    # –ö–æ–º–∞–Ω–¥—ã CLI –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª:
    commands = [
        "# –ü—Ä–æ—Å—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞:",
        "python -m src.main textbook.pdf output.csv",
        "",
        "# –° –ø–æ–¥—Ä–æ–±–Ω—ã–º –≤—ã–≤–æ–¥–æ–º:",
        "python -m src.main textbook.pdf output.csv --verbose",
        "",
        "# –í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏:",
        "python -m src.main textbook.pdf output.csv --resume",
        "",
        "# Production —Ä–µ–∂–∏–º —Å JSON –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º:",
        "python -m src.main textbook.pdf output.csv --production"
    ]
    
    for cmd in commands:
        print(cmd)


def example_batch_processing():
    """
    –ü—Ä–∏–º–µ—Ä 2: Batch –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
    
    –ö–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–æ PDF —Ñ–∞–π–ª–æ–≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.
    """
    print("\n=== –ü—Ä–∏–º–µ—Ä 2: Batch –æ–±—Ä–∞–±–æ—Ç–∫–∞ ===")
    
    batch_script = '''#!/bin/bash
# –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö PDF —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏

INPUT_DIR="./textbooks"
OUTPUT_DIR="./results"

# –°–æ–∑–¥–∞—ë–º –≤—ã—Ö–æ–¥–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
mkdir -p "$OUTPUT_DIR"

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π PDF —Ñ–∞–π–ª
for pdf_file in "$INPUT_DIR"/*.pdf; do
    if [ -f "$pdf_file" ]; then
        filename=$(basename "$pdf_file" .pdf)
        output_file="$OUTPUT_DIR/${filename}_tasks.csv"
        
        echo "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: $pdf_file -> $output_file"
        
        python -m src.main "$pdf_file" "$output_file" --verbose --resume
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏
        if [ $? -eq 0 ]; then
            echo "‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω: $filename"
        else
            echo "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: $filename"
        fi
        
        echo "---"
    fi
done

echo "Batch –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
'''
    
    print("–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —Å–∫—Ä–∏–ø—Ç –∫–∞–∫ process_all.sh:")
    print(batch_script)


def example_python_api():
    """
    –ü—Ä–∏–º–µ—Ä 3: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ Python API
    
    –î–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ –¥—Ä—É–≥–∏–µ Python –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    """
    print("\n=== –ü—Ä–∏–º–µ—Ä 3: Python API ===")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    setup_development_logger()
    logger = get_logger(__name__)
    
    print("# –ü—Ä–∏–º–µ—Ä –∫–æ–¥–∞ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:")
    
    example_code = '''
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ path
sys.path.insert(0, str(Path(__file__).parent / "src"))

from src.main import OCROCDOrchestrator
from src.utils.config import load_config
from src.utils.logger import setup_development_logger

def process_textbook(pdf_path: str, csv_path: str) -> bool:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ —É—á–µ–±–Ω–∏–∫–∞ —á–µ—Ä–µ–∑ Python API."""
    
    try:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞
        config = load_config()
        setup_development_logger()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        orchestrator = OCROCDOrchestrator(config)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        if not orchestrator.setup_components(pdf_path, csv_path):
            print("‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
            return False
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞
        print(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É {pdf_path}")
        result = orchestrator.process_pdf(resume=True)
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
        summary = result["summary"]
        print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç—Ä–∞–Ω–∏—Ü: {summary['successful_pages']}/{summary['total_pages']}")
        print(f"üìä –ò–∑–≤–ª–µ—á–µ–Ω–æ –∑–∞–¥–∞—á: {summary['total_tasks']}")
        print(f"‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {summary['processing_duration_seconds']:.1f}s")
        
        # Cleanup
        orchestrator.cleanup()
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
if __name__ == "__main__":
    success = process_textbook("textbook.pdf", "output.csv")
    if success:
        print("üéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("üí• –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
'''
    
    print(example_code)


def example_advanced_configuration():
    """
    –ü—Ä–∏–º–µ—Ä 4: –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    
    –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è specific use cases.
    """
    print("\n=== –ü—Ä–∏–º–µ—Ä 4: –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===")
    
    env_example = '''
# .env —Ñ–∞–π–ª —Å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏

# –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
OPENAI_API_KEY=your_api_key_here

# API –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
OPENAI_MODEL=gpt-4-vision-preview
OPENAI_MAX_TOKENS=4096
OPENAI_TEMPERATURE=0.1          # –î–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–æ–≤
OPENAI_TIMEOUT=120              # –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π timeout –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
OPENAI_MAX_RETRIES=5            # –ë–æ–ª—å—à–µ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è reliability

# –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
OUTPUT_DIR=./results
TEMP_DIR=./temp                 # SSD –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
LOGS_DIR=./logs

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
LOG_LEVEL=INFO                  # DEBUG –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
LOG_MAX_FILE_SIZE=50MB
LOG_RETENTION_DAYS=30

# Performance –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
PDF_DPI=300                     # –ö–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
PDF_MAX_DIMENSION=2048          # –ë–∞–ª–∞–Ω—Å –∫–∞—á–µ—Å—Ç–≤–∞/—Å–∫–æ—Ä–æ—Å—Ç–∏
VISION_BATCH_SIZE=1             # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö API calls
'''
    
    print("–ü—Ä–∏–º–µ—Ä .env —Ñ–∞–π–ª–∞ —Å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏:")
    print(env_example)


def example_quality_analysis():
    """
    –ü—Ä–∏–º–µ—Ä 5: –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    
    –ö–∞–∫ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏ —É–ª—É—á—à–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è.
    """
    print("\n=== –ü—Ä–∏–º–µ—Ä 5: –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ ===")
    
    analysis_code = '''
import pandas as pd
import matplotlib.pyplot as plt

def analyze_extraction_quality(csv_path: str):
    """–ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    df = pd.read_csv(csv_path)
    
    print(f"üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"   –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {len(df)}")
    print(f"   –°—Ç—Ä–∞–Ω–∏—Ü: {df['page_number'].nunique()}")
    print(f"   –ó–∞–¥–∞—á –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É: {len(df) / df['page_number'].nunique():.1f}")
    
    # –ê–Ω–∞–ª–∏–∑ confidence scores
    if 'confidence_score' in df.columns:
        avg_confidence = df['confidence_score'].mean()
        high_confidence = (df['confidence_score'] > 0.8).sum()
        
        print(f"\\nüéØ –ö–∞—á–µ—Å—Ç–≤–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è:")
        print(f"   –°—Ä–µ–¥–Ω–∏–π confidence: {avg_confidence:.3f}")
        print(f"   –í—ã—Å–æ–∫–∏–π confidence (>0.8): {high_confidence}/{len(df)} ({high_confidence/len(df)*100:.1f}%)")
    
    # –ê–Ω–∞–ª–∏–∑ –Ω–æ–º–µ—Ä–æ–≤ –∑–∞–¥–∞—á
    unknown_tasks = df['task_number'].str.startswith('unknown-').sum()
    print(f"\\nüî¢ –ê–Ω–∞–ª–∏–∑ –Ω—É–º–µ—Ä–∞—Ü–∏–∏:")
    print(f"   Unknown –Ω–æ–º–µ—Ä–∞: {unknown_tasks}/{len(df)} ({unknown_tasks/len(df)*100:.1f}%)")
    
    # –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    with_images = df['has_image'].sum()
    print(f"\\nüñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:")
    print(f"   –ó–∞–¥–∞—á —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏: {with_images}/{len(df)} ({with_images/len(df)*100:.1f}%)")
    
    # –ê–Ω–∞–ª–∏–∑ –¥–ª–∏–Ω—ã —Ç–µ–∫—Å—Ç–∞
    if 'word_count' in df.columns:
        avg_words = df['word_count'].mean()
        print(f"\\nüìù –¢–µ–∫—Å—Ç:")
        print(f"   –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤: {avg_words:.1f}")
        
        # –ü–æ–∏—Å–∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∑–∞–¥–∞—á
        short_tasks = (df['word_count'] < 3).sum()
        long_tasks = (df['word_count'] > 50).sum()
        
        print(f"   –ö–æ—Ä–æ—Ç–∫–∏–µ –∑–∞–¥–∞—á–∏ (<3 —Å–ª–æ–≤): {short_tasks}")
        print(f"   –î–ª–∏–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ (>50 —Å–ª–æ–≤): {long_tasks}")
    
    return df

# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
df = analyze_extraction_quality("output.csv")

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
page_stats = df.groupby('page_number').agg({
    'task_number': 'count',
    'confidence_score': 'mean',
    'has_image': 'sum'
}).round(3)

print("\\nüìÑ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º:")
print(page_stats.head(10))
'''
    
    print("–ü—Ä–∏–º–µ—Ä –∫–æ–¥–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—á–µ—Å—Ç–≤–∞:")
    print(analysis_code)


def example_troubleshooting():
    """
    –ü—Ä–∏–º–µ—Ä 6: –†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º
    
    –ß–∞—Å—Ç—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –∏ –∏—Ö —Ä–µ—à–µ–Ω–∏—è.
    """
    print("\n=== –ü—Ä–∏–º–µ—Ä 6: –†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º ===")
    
    troubleshooting = '''
üîß –ß–∞—Å—Ç—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –∏ —Ä–µ—à–µ–Ω–∏—è:

1. "ModuleNotFoundError: No module named 'src'"
   –†–µ—à–µ–Ω–∏–µ: –ó–∞–ø—É—Å–∫–∞–π—Ç–µ –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
   ‚úÖ python -m src.main input.pdf output.csv

2. "OpenAI API key not found"
   –†–µ—à–µ–Ω–∏–µ: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env —Ñ–∞–π–ª
   ‚úÖ echo "OPENAI_API_KEY=your_key" > .env

3. "Rate limit exceeded"
   –†–µ—à–µ–Ω–∏–µ: –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç –∑–∞–ø—Ä–æ—Å—ã
   ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --resume –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è

4. "PDF processing failed"
   –†–µ—à–µ–Ω–∏–µ: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∏ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
   ‚úÖ file textbook.pdf  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞
   ‚úÖ ls -la textbook.pdf  # –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞

5. –ù–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
   –†–µ—à–µ–Ω–∏–µ: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ PDF
   ‚úÖ –£–≤–µ–ª–∏—á—å—Ç–µ DPI: PDF_DPI=400 –≤ .env
   ‚úÖ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: tail -f logs/ocr_ocd.log

6. –ú–µ–¥–ª–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
   –†–µ—à–µ–Ω–∏–µ: –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
   ‚úÖ –£–º–µ–Ω—å—à–∏—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ: PDF_MAX_DIMENSION=1500
   ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ SSD –¥–ª—è TEMP_DIR
   ‚úÖ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ

üö® –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ:
   # –ï—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ—Ä–≤–∞–ª–∞—Å—å, –º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å:
   python -m src.main input.pdf output.csv --resume
   
   # –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–æ, –æ—á–∏—Å—Ç–∏—Ç–µ –∏ –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ:
   rm -f temp/processing_state.json
   python -m src.main input.pdf output.csv

üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:
   # –í –æ—Ç–¥–µ–ª—å–Ω–æ–º —Ç–µ—Ä–º–∏–Ω–∞–ª–µ:
   tail -f logs/ocr_ocd.log | grep "Page.*processed"
   
   # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞:
   watch -n 5 'wc -l output.csv'
'''
    
    print(troubleshooting)


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è."""
    
    print("üîçüìö OCR-OCD Usage Examples")
    print("=" * 50)
    print("–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è OCR-OCD –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∑–∞–¥–∞—á –∏–∑ PDF —É—á–µ–±–Ω–∏–∫–æ–≤")
    print()
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –ø—Ä–∏–º–µ—Ä—ã
    example_basic_usage()
    example_batch_processing()
    example_python_api()
    example_advanced_configuration()
    example_quality_analysis()
    example_troubleshooting()
    
    print("\n" + "=" * 50)
    print("üéâ –í—Å–µ –ø—Ä–∏–º–µ—Ä—ã –ø–æ–∫–∞–∑–∞–Ω—ã!")
    print("üí° –ù–∞—á–Ω–∏—Ç–µ —Å –ø—Ä–æ—Å—Ç–æ–≥–æ: python -m src.main input.pdf output.csv")
    print("üìö –ü–æ–ª–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –≤ README.md")


if __name__ == "__main__":
    main() 