#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω—ã—Ö –∞–¥–∞–ø—Ç–µ—Ä–æ–≤
"""

import sys
from pathlib import Path
from PIL import Image
import io

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ Python path
sys.path.insert(0, str(Path(__file__).parent / "src"))

from src.core.vision_adapters import VisionAdapterFactory, VisionProvider
from src.utils.config import load_config, get_available_providers
from src.utils.logger import setup_development_logger


def create_test_image():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º"""
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º
    img = Image.new('RGB', (400, 200), color='white')
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —ç—Ç–æ –±—É–¥–µ—Ç –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–¥–∞—á–∞)
    from PIL import ImageDraw, ImageFont
    
    draw = ImageDraw.Draw(img)
    try:
        # –ü–æ–ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π —à—Ä–∏—Ñ—Ç
        font = ImageFont.truetype("/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf", 16)
    except:
        # Fallback –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —à—Ä–∏—Ñ—Ç
        font = ImageFont.load_default()
    
    text = "–ó–∞–¥–∞—á–∞ 1: –†–µ—à–∏—Ç–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ 2x + 5 = 13"
    draw.text((20, 50), text, fill='black', font=font)
    
    text2 = "–ó–∞–¥–∞—á–∞ 2: –ù–∞–π–¥–∏—Ç–µ –ø–ª–æ—â–∞–¥—å –∫—Ä—É–≥–∞ —Ä–∞–¥–∏—É—Å–æ–º 5 —Å–º"
    draw.text((20, 100), text2, fill='black', font=font)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ bytes
    buffer = io.BytesIO()
    img.save(buffer, format='PNG')
    return buffer.getvalue()


def test_provider(provider: VisionProvider, config):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
    print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {provider.value.upper()}...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∞–¥–∞–ø—Ç–µ—Ä
        adapter = VisionAdapterFactory.create_adapter(provider, config.api)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        test_result = adapter.test_connection()
        
        if test_result.get("status") == "success":
            print(f"‚úÖ {provider.value.upper()} –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
            print(f"   –ú–æ–¥–µ–ª—å: {test_result.get('model_used')}")
            print(f"   –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {test_result.get('processing_time', 0):.2f}—Å")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            test_image = create_test_image()
            prompt = """
            –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –Ω–∞–π–¥–∏ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏.
            
            –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π –æ—Ç–≤–µ—Ç –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ:
            {
                "tasks": [
                    {
                        "number": "–Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏",
                        "text": "–ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏",
                        "type": "—Ç–∏–ø –∑–∞–¥–∞—á–∏",
                        "difficulty": "—É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏"
                    }
                ]
            }
            """
            
            result = adapter.extract_tasks_from_page(
                image_data=test_image,
                page_number=1,
                prompt=prompt
            )
            
            if result.get("tasks"):
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(result['tasks'])} –∑–∞–¥–∞—á")
                for task in result["tasks"]:
                    print(f"   üìù {task.get('number', 'N/A')}: {task.get('text', 'N/A')[:50]}...")
            else:
                print("‚ö†Ô∏è  –ó–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                
        else:
            print(f"‚ùå {provider.value.upper()} –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {test_result.get('error')}")
            
    except Exception as e:
        print(f"‚ùå {provider.value.upper()} –æ—à–∏–±–∫–∞: {e}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω—ã—Ö –∞–¥–∞–ø—Ç–µ—Ä–æ–≤")
    print("=" * 50)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    setup_development_logger()
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = load_config()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã
        available_providers = get_available_providers()
        print(f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã: {[p.value for p in available_providers]}")
        print(f"üéØ –ü—Ä–æ–≤–∞–π–¥–µ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {config.api.provider.value}")
        print(f"üîß –ú–æ–¥–µ–ª—å: {config.api.model_name}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        for provider in available_providers:
            test_provider(provider, config)
        
        print("\n" + "=" * 50)
        print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return 1
    
    return 0


if __name__ == "__main__":
    exit(main()) 