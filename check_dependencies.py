#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Å–µ—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
"""

import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ Python path
sys.path.insert(0, str(Path(__file__).parent / "src"))

def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫—É –≤—Å–µ—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
    print("=" * 40)
    
    dependencies = {
        "PyMuPDF": "fitz",
        "openai": "openai", 
        "Pillow": "PIL",
        "python-dotenv": "dotenv",
        "pandas": "pandas",
        "tenacity": "tenacity",
        "click": "click",
        "loguru": "loguru",
        "pydantic": "pydantic",
        "tqdm": "tqdm",
        "requests": "requests",
        "google-generativeai": "google.generativeai",
        "anthropic": "anthropic"
    }
    
    missing_deps = []
    available_deps = []
    
    for dep_name, import_name in dependencies.items():
        try:
            __import__(import_name)
            print(f"‚úÖ {dep_name}")
            available_deps.append(dep_name)
        except ImportError:
            print(f"‚ùå {dep_name}")
            missing_deps.append(dep_name)
    
    print("\n" + "=" * 40)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {len(available_deps)}/{len(dependencies)} –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    
    if missing_deps:
        print(f"\n‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {', '.join(missing_deps)}")
        print("\nüí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏—Ö –∫–æ–º–∞–Ω–¥–æ–π:")
        print("pip install -r requirements.txt")
        return False
    else:
        print("\n‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
        return True

def check_vision_adapters():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∞–¥–∞–ø—Ç–µ—Ä–æ–≤ –¥–ª—è –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω—ã—Ö API"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–∞–ø—Ç–µ—Ä–æ–≤ –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω—ã—Ö API")
    print("=" * 40)
    
    try:
        from src.core.vision_adapters import VisionAdapterFactory, VisionProvider
        
        available_providers = VisionAdapterFactory.get_available_providers()
        print(f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã: {[p.value for p in available_providers]}")
        
        if VisionProvider.OPENAI in available_providers:
            print("‚úÖ OpenAI –¥–æ—Å—Ç—É–ø–µ–Ω")
        else:
            print("‚ùå OpenAI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            
        if VisionProvider.GEMINI in available_providers:
            print("‚úÖ Gemini –¥–æ—Å—Ç—É–ø–µ–Ω")
        else:
            print("‚ùå Gemini –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            
        if VisionProvider.CLAUDE in available_providers:
            print("‚úÖ Claude –¥–æ—Å—Ç—É–ø–µ–Ω")
        else:
            print("‚ùå Claude –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–¥–∞–ø—Ç–µ—Ä–æ–≤: {e}")
        return False

if __name__ == "__main__":
    deps_ok = check_dependencies()
    adapters_ok = check_vision_adapters()
    
    print("\n" + "=" * 40)
    if deps_ok and adapters_ok:
        print("üéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ.")
    else:
        print("‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –∏—Ö –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º.")
        sys.exit(1) 