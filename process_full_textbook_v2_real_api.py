#!/usr/bin/env python3
"""
OCR-OCD v2 —Å —Ä–µ–∞–ª—å–Ω—ã–º GPT-4 Vision API
=====================================

–í–µ—Ä—Å–∏—è —Å –ø—Ä—è–º–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π OpenAI API, –æ–±—Ö–æ–¥—è—â–∞—è –ø—Ä–æ–±–ª–µ–º—ã VisionClient
"""

import sys
import json
import time
import base64
import click
import openai
from pathlib import Path
from datetime import datetime
from typing import List, Dict, Any, Optional
from dotenv import load_dotenv

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ Python path
sys.path.insert(0, str(Path(__file__).parent / "src"))

from src.core.pdf_processor import PDFProcessor
from src.core.data_extractor import DataExtractor
from src.core.csv_writer import CSVWriter
from src.utils.logger import setup_development_logger, setup_production_logger, get_logger
from src.utils.state_manager import StateManager


class SimpleVisionAPI:
    """–ü—Ä–æ—Å—Ç–æ–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è GPT-4 Vision API."""
    
    def __init__(self):
        load_dotenv()
        self.client = openai.OpenAI()
        
    def extract_tasks_from_page(self, image_data: bytes, page_number: int) -> Dict[str, Any]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∑–∞–¥–∞—á–∏ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏—Å–ø–æ–ª—å–∑—É—è GPT-4 Vision."""
        
        # –ö–æ–¥–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        b64_image = base64.b64encode(image_data).decode('utf-8')
        
        # –ü—Ä–æ—Å—Ç–æ–π –ø—Ä–æ–º–ø—Ç
        prompt = f"""–ü–æ—Å–º–æ—Ç—Ä–∏ –Ω–∞ —ç—Ç—É —Å—Ç—Ä–∞–Ω–∏—Ü—É {page_number} –∏–∑ —É—á–µ–±–Ω–∏–∫–∞ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏ –¥–ª—è 1 –∫–ª–∞—Å—Å–∞.

–ù–∞–π–¥–∏ –≤—Å–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏ –∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.
–î–ª—è –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–∏ –≤–µ—Ä–Ω–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ:

{{
  "page_number": {page_number},
  "tasks": [
    {{
      "task_number": "1",
      "task_text": "—Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏",
      "has_image": true
    }}
  ]
}}

–ï—Å–ª–∏ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –Ω–µ –≤–∏–¥–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–π "unknown-1", "unknown-2" –∏ —Ç.–¥.
–û—Ç–≤–µ—Ç—å –¢–û–õ–¨–ö–û JSON, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞."""

        try:
            start_time = time.time()
            
            response = self.client.chat.completions.create(
                model="gpt-4o",
                messages=[
                    {
                        "role": "user", 
                        "content": [
                            {"type": "text", "text": prompt},
                            {"type": "image_url", "image_url": {"url": f"data:image/png;base64,{b64_image}"}}
                        ]
                    }
                ],
                max_tokens=2000,
                temperature=0.1
            )
            
            processing_time = time.time() - start_time
            content = response.choices[0].message.content
            
            # –ü–æ–ø—ã—Ç–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON
            try:
                parsed_data = json.loads(content)
                json_valid = True
            except json.JSONDecodeError:
                # –ï—Å–ª–∏ –Ω–µ JSON, —Å–æ–∑–¥–∞—ë–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤—Ä—É—á–Ω—É—é
                json_valid = False
                parsed_data = {
                    "page_number": page_number,
                    "tasks": [
                        {
                            "task_number": "unknown-1",
                            "task_text": content[:200] + "..." if len(content) > 200 else content,
                            "has_image": False
                        }
                    ]
                }
            
            return {
                "content": content,
                "parsed_data": parsed_data,
                "json_valid": json_valid,
                "usage": response.usage.model_dump() if response.usage else {},
                "model": response.model,
                "processing_time": processing_time,
                "image_info": {"size_bytes": len(image_data)},
                "prompt_type": "real_api"
            }
            
        except Exception as e:
            print(f"‚ùå API –æ—à–∏–±–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page_number}: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            return {
                "content": f"–û—à–∏–±–∫–∞ API: {e}",
                "parsed_data": {"page_number": page_number, "tasks": []},
                "json_valid": False,
                "usage": {},
                "model": "error",
                "processing_time": 0,
                "image_info": {"size_bytes": len(image_data)},
                "prompt_type": "error"
            }


class IntermediateStorage:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤."""
    
    def __init__(self, storage_dir: Path):
        self.storage_dir = storage_dir
        self.storage_dir.mkdir(parents=True, exist_ok=True)
        
    def save_page_result(self, page_number: int, page_data: Dict[str, Any]) -> None:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã."""
        file_path = self.storage_dir / f"page_{page_number:03d}.json"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        page_data.update({
            'processed_at': datetime.now().isoformat(),
            'page_number': page_number,
            'storage_version': '2.1'
        })
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º datetime –æ–±—ä–µ–∫—Ç—ã –≤ —Å—Ç—Ä–æ–∫–∏
        page_data = self._serialize_datetime(page_data)
        
        with open(file_path, 'w', encoding='utf-8') as f:
            json.dump(page_data, f, ensure_ascii=False, indent=2)
    
    def load_page_result(self, page_number: int) -> Optional[Dict[str, Any]]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã."""
        file_path = self.storage_dir / f"page_{page_number:03d}.json"
        
        if not file_path.exists():
            return None
            
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                return json.load(f)
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page_number}: {e}")
            return None
    
    def get_processed_pages(self) -> List[int]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–æ–º–µ—Ä–æ–≤ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü."""
        processed = []
        
        for file_path in sorted(self.storage_dir.glob("page_*.json")):
            try:
                page_num = int(file_path.stem.split('_')[1])
                processed.append(page_num)
            except (ValueError, IndexError):
                continue
                
        return sorted(processed)
    
    def load_all_results(self) -> List[Dict[str, Any]]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã."""
        results = []
        
        for page_num in self.get_processed_pages():
            page_data = self.load_page_result(page_num)
            if page_data:
                results.append(page_data)
        
        return results
    
    def clear_storage(self) -> None:
        """–û—á–∏—â–∞–µ—Ç –≤—Å–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ñ–∞–π–ª—ã."""
        for file_path in self.storage_dir.glob("page_*.json"):
            file_path.unlink()
    
    def _serialize_datetime(self, obj):
        """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç datetime –æ–±—ä–µ–∫—Ç—ã –≤ —Å—Ç—Ä–æ–∫–∏."""
        if isinstance(obj, datetime):
            return obj.isoformat()
        elif isinstance(obj, dict):
            return {key: self._serialize_datetime(value) for key, value in obj.items()}
        elif isinstance(obj, list):
            return [self._serialize_datetime(item) for item in obj]
        else:
            return obj


@click.command()
@click.argument('pdf_path', type=click.Path(exists=True))
@click.argument('output_csv', type=click.Path())
@click.option('--force', is_flag=True, help='–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã')
@click.option('--start-page', type=int, default=1, help='–ù–∞—á–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏')
@click.option('--end-page', type=int, default=None, help='–ö–æ–Ω–µ—á–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏')
@click.option('--production', is_flag=True, help='Production —Ä–µ–∂–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è')
@click.option('--verbose', is_flag=True, help='–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥')
def process_textbook_real_api(pdf_path, output_csv, force, start_page, end_page, production, verbose):
    """
    OCR-OCD v2 —Å —Ä–µ–∞–ª—å–Ω—ã–º GPT-4 Vision API.
    """
    
    print("üöÄüìö OCR-OCD v2: –†–µ–∞–ª—å–Ω—ã–π GPT-4 Vision API")
    print("=" * 50)
    print(f"üìÑ PDF: {pdf_path}")
    print(f"üìä –í—ã–≤–æ–¥: {output_csv}")
    print(f"üîÑ Force —Ä–µ–∂–∏–º: {'‚úÖ' if force else '‚ùå'}")
    print(f"ü§ñ –†–µ–∞–ª—å–Ω—ã–π GPT-4 Vision API: ‚úÖ")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    if production:
        setup_production_logger()
    else:
        setup_development_logger()
    
    logger = get_logger(__name__)
    
    # –°–æ–∑–¥–∞—ë–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    paths = {
        'output': Path("output"),
        'temp': Path("temp"), 
        'logs': Path("logs"),
        'storage': Path("temp/processed_pages_real_api")
    }
    
    for path in paths.values():
        path.mkdir(parents=True, exist_ok=True)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    storage = IntermediateStorage(paths['storage'])
    
    if force:
        print("üóëÔ∏è  Force —Ä–µ–∂–∏–º: –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
        storage.clear_storage()
    
    start_time = datetime.now()
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PDF –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
        print(f"üìÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PDF –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞...")
        pdf_processor = PDFProcessor(
            pdf_path=pdf_path,
            temp_dir=paths['temp'],
            dpi=150,  # –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –¥–ª—è Vision API
            image_format="PNG"
        )
        
        with pdf_processor:
            pdf_processor.load_pdf()
            total_pages = pdf_processor.get_page_count()
            
            if end_page is None:
                end_page = total_pages
            else:
                end_page = min(end_page, total_pages)
            
            print(f"‚úÖ PDF –∑–∞–≥—Ä—É–∂–µ–Ω: {total_pages} —Å—Ç—Ä–∞–Ω–∏—Ü")
            print(f"üéØ –û–±—Ä–∞–±–æ—Ç–∫–∞: —Å—Ç—Ä–∞–Ω–∏—Ü—ã {start_page}-{end_page}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            processed_pages = set(storage.get_processed_pages())
            
            if processed_pages and not force:
                print(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(processed_pages)} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü")
                print(f"üìä –ü–æ—Å–ª–µ–¥–Ω—è—è: {max(processed_pages) if processed_pages else 'none'}")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            data_extractor = DataExtractor()
            vision_api = SimpleVisionAPI()
            
            print(f"ü§ñ –†–µ–∞–ª—å–Ω—ã–π GPT-4 Vision API –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            # –°—á—ë—Ç—á–∏–∫–∏
            processed_count = 0
            skipped_count = 0 
            error_count = 0
            total_tasks = 0
            
            print(f"\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å —Ä–µ–∞–ª—å–Ω—ã–º API...")
            
            for page_num in range(start_page, end_page + 1):
                page_start_time = time.time()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É
                if not force and page_num in processed_pages:
                    skipped_count += 1
                    if verbose:
                        print(f"‚è≠Ô∏è  –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num}: –ø—Ä–æ–ø—É—â–µ–Ω–∞ (—É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞)")
                    continue
                
                try:
                    progress = (page_num - start_page + 1) / (end_page - start_page + 1) * 100
                    print(f"\nüìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num}/{end_page} ({progress:.1f}%)")
                    
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    if verbose:
                        print(f"  üñºÔ∏è  –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
                    image_data = pdf_processor.convert_page_to_image(page_num - 1, save_to_file=False)
                    
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ —Ä–µ–∞–ª—å–Ω—ã–π API
                    if verbose:
                        print(f"  ü§ñ GPT-4 Vision API –∑–∞–ø—Ä–æ—Å...")
                    
                    api_response = vision_api.extract_tasks_from_page(image_data, page_num)
                    
                    if verbose:
                        print(f"  ‚úÖ API –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω ({api_response['model']})")
                        print(f"  üìä Tokens: {api_response['usage'].get('total_tokens', 0)}")
                    
                    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
                    if verbose:
                        print(f"  üìã –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–∞–¥–∞—á...")
                    
                    image_info = {
                        "size_bytes": len(image_data),
                        "format": "PNG",
                        "page_number": page_num
                    }
                    
                    page = data_extractor.parse_api_response(
                        api_response['parsed_data'],
                        page_num,
                        page_start_time,
                        image_info
                    )
                    
                    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                    page_result = {
                        'page_number': page_num,
                        'tasks': [task.model_dump() for task in page.tasks],
                        'processing_time': time.time() - page_start_time,
                        'image_info': image_info,
                        'api_method': 'real_gpt4_vision',
                        'task_count': len(page.tasks),
                        'api_response': api_response
                    }
                    
                    storage.save_page_result(page_num, page_result)
                    
                    processed_count += 1
                    total_tasks += len(page.tasks)
                    
                    processing_time = time.time() - page_start_time
                    print(f"     ‚úÖ –ó–∞–¥–∞—á: {len(page.tasks)}, –í—Ä–µ–º—è: {processing_time:.1f}s")
                    
                    if verbose:
                        for i, task in enumerate(page.tasks, 1):
                            print(f"       {i}. {task.task_number}: {task.task_text[:40]}...")
                    
                    # –ü–∞—É–∑–∞ –¥–ª—è –≤–µ–∂–ª–∏–≤–æ—Å—Ç–∏ –∫ API
                    time.sleep(1)
                    
                except Exception as e:
                    logger.error(f"Error processing page {page_num}: {e}")
                    print(f"     ‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page_num}: {e}")
                    error_count += 1
                    continue
            
            # –§–∏–Ω–∞–ª—å–Ω—ã–π —Å–±–æ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            print(f"\nüíæ –°–±–æ—Ä —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
            all_results = storage.load_all_results()
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ CSV
            if all_results:
                print(f"üìä –°–æ–∑–¥–∞–Ω–∏–µ CSV —Ñ–∞–π–ª–∞...")
                create_final_csv(all_results, output_csv)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            total_time = (datetime.now() - start_time).total_seconds()
            
            print(f"\nüéâ –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
            print(f"=" * 40)
            print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            print(f"   üìö –°—Ç—Ä–∞–Ω–∏—Ü –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed_count}")
            print(f"   ‚è≠Ô∏è  –°—Ç—Ä–∞–Ω–∏—Ü –ø—Ä–æ–ø—É—â–µ–Ω–æ: {skipped_count}")
            print(f"   ‚ùå –û—à–∏–±–æ–∫: {error_count}")
            print(f"   üìù –ó–∞–¥–∞—á –∏–∑–≤–ª–µ—á–µ–Ω–æ: {total_tasks}")
            print(f"   ‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.1f}s ({total_time/60:.1f} –º–∏–Ω—É—Ç)")
            if processed_count > 0:
                print(f"   ‚ö° –°–∫–æ—Ä–æ—Å—Ç—å: {processed_count/total_time*60:.1f} —Å—Ç—Ä–∞–Ω–∏—Ü/–º–∏–Ω—É—Ç—É")
            print(f"   üìÅ CSV —Ñ–∞–π–ª: {output_csv}")
            
            return True
            
    except Exception as e:
        logger.error(f"Critical error: {e}")
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False


def create_final_csv(results: List[Dict], output_path: str) -> None:
    """–°–æ–∑–¥–∞—ë—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π CSV —Ñ–∞–π–ª –∏–∑ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤."""
    
    all_tasks = []
    
    for page_result in results:
        page_num = page_result['page_number']
        processing_time = page_result.get('processing_time', 0)
        api_method = page_result.get('api_method', 'unknown')
        
        for task_data in page_result.get('tasks', []):
            task_row = {
                'page_number': page_num,
                'task_number': task_data.get('task_number', 'unknown'),
                'task_text': task_data.get('task_text', ''),
                'has_image': task_data.get('has_image', False),
                'confidence_score': task_data.get('confidence_score', 0.0),
                'processing_time': processing_time,
                'api_method': api_method,
                'extracted_at': page_result.get('processed_at', ''),
                'word_count': len(task_data.get('task_text', '').split())
            }
            all_tasks.append(task_row)
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –Ω–æ–º–µ—Ä—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    all_tasks.sort(key=lambda x: x['page_number'])
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º CSV
    import csv
    with open(output_path, 'w', newline='', encoding='utf-8') as f:
        if all_tasks:
            fieldnames = list(all_tasks[0].keys())
            writer = csv.DictWriter(f, fieldnames=fieldnames)
            writer.writeheader()
            writer.writerows(all_tasks)
    
    print(f"‚úÖ CSV —Å–æ–∑–¥–∞–Ω: {len(all_tasks)} –∑–∞–¥–∞—á —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")


if __name__ == "__main__":
    process_textbook_real_api() 