#!/usr/bin/env python3
"""
OCR-OCD Ultimate Hybrid: GPT-4 Vision + OCRmyPDF-EasyOCR
========================================================

–û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –≥–∏–±—Ä–∏–¥–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:
- üñºÔ∏è GPT-4 Vision: –æ—Å–Ω–æ–≤–Ω–æ–π –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å—Ç—Ä–∞–Ω–∏—Ü
- üìã OCRmyPDF-EasyOCR: –≤—ã—Å–æ–∫–æ—Ç–æ—á–Ω–∞—è –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
- üß† –õ—É—á—à–µ–µ –∏–∑ –¥–≤—É—Ö –º–∏—Ä–æ–≤: –ø–æ–Ω–∏–º–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ + —Ç–æ—á–Ω–æ—Å—Ç—å OCR
"""

import sys
import json
import time
import click
from pathlib import Path
from datetime import datetime
from typing import List, Dict, Any, Optional
import re

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ Python path
sys.path.insert(0, str(Path(__file__).parent / "src"))

from src.utils.logger import setup_development_logger, setup_production_logger, get_logger
from src.utils.ocrmypdf_easyocr_parser import OCRmyPDFEasyOCRParser
from src.core.pdf_processor import PDFProcessor
from src.core.vision_client import VisionClient
from src.core.data_extractor import DataExtractor
from src.utils.config import load_config


class UltimateHybridExtractor:
    """
    –ì–∏–±—Ä–∏–¥–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: GPT-4 Vision (–æ—Å–Ω–æ–≤–Ω–æ–π) + OCRmyPDF-EasyOCR (–≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π).
    """
    
    def __init__(self, pdf_path: str, ocr_file_path: str, config_path: str = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä–∞.
        
        Args:
            pdf_path: –ü—É—Ç—å –∫ PDF —Ñ–∞–π–ª—É –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            ocr_file_path: –ü—É—Ç—å –∫ OCRmyPDF-EasyOCR TSV —Ñ–∞–π–ª—É
            config_path: –ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
        """
        self.logger = get_logger(__name__)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        self.config = load_config(config_path)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.pdf_processor = PDFProcessor(pdf_path)
        self.vision_client = VisionClient(self.config.api)
        self.data_extractor = DataExtractor()
        self.ocr_parser = OCRmyPDFEasyOCRParser(ocr_file_path)
        
        self.logger.info(f"Hybrid extractor initialized: PDF={pdf_path}, OCR={ocr_file_path}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
        try:
            api_available = self.vision_client.test_api_connection()
            self.logger.info(f"GPT-4 Vision API status: {'‚úÖ Available' if api_available else '‚ùå Unavailable'}")
            self.api_available = api_available
        except Exception as e:
            self.logger.warning(f"GPT-4 Vision API test failed: {e}")
            self.api_available = False
    
    def extract_tasks_from_page(self, page_number: int) -> Dict[str, Any]:
        """
        –ì–∏–±—Ä–∏–¥–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–∞–¥–∞—á: GPT-4 Vision + OCRmyPDF-EasyOCR.
        
        Args:
            page_number: –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
        """
        start_time = time.time()
        
        try:
            # 1. –ü–æ–ª—É—á–∞–µ–º –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ OCRmyPDF-EasyOCR
            ocr_supplement = self._get_ocr_supplement(page_number)
            ocr_summary = self._get_ocr_summary(page_number)
            
            # 2. –û—Å–Ω–æ–≤–Ω–æ–π –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ GPT-4 Vision (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
            if self.api_available:
                tasks = self._extract_with_vision_primary(page_number, ocr_supplement)
                method = "hybrid_vision_primary"
            else:
                # Fallback: —Ç–æ–ª—å–∫–æ OCRmyPDF-EasyOCR
                tasks = self._extract_with_ocr_fallback(page_number)
                method = "hybrid_ocr_fallback"
            
            processing_time = time.time() - start_time
            
            return {
                "page_number": page_number,
                "tasks": tasks,
                "processing_time": processing_time,
                "method": method,
                "api_available": self.api_available,
                "ocr_summary": ocr_summary,
                "ocr_supplement_length": len(ocr_supplement),
                "hybrid_approach": "vision_primary_ocr_supplementary" if self.api_available else "ocr_only_fallback"
            }
            
        except Exception as e:
            self.logger.error(f"Error extracting tasks from page {page_number}: {e}")
            return {
                "page_number": page_number,
                "tasks": [],
                "processing_time": time.time() - start_time,
                "method": "hybrid_error",
                "error": str(e)
            }
    
    def _get_ocr_supplement(self, page_number: int) -> str:
        """–°–æ–∑–¥–∞—ë—Ç –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ OCRmyPDF-EasyOCR –¥–ª—è GPT-4 Vision."""
        
        try:
            ocr_supplement = self.ocr_parser.create_vision_prompt_supplement(page_number)
            
            if not ocr_supplement:
                return ""
            
            # –£–ª—É—á—à–∞–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–ª—è GPT-4 Vision
            enhanced_supplement = f"""
üìã –í–´–°–û–ö–û–¢–û–ß–ù–ê–Ø OCR –ò–ù–§–û–†–ú–ê–¶–ò–Ø (EasyOCR —á–µ—Ä–µ–∑ GPU):
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

{ocr_supplement}

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
üí° –ò–ù–°–¢–†–£–ö–¶–ò–Ø: –ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∫–∞–∫ –≤—ã—Å–æ–∫–æ—Ç–æ—á–Ω—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É 
–¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏. –¢–µ–∫—Å—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é 
100% —á–µ—Ä–µ–∑ EasyOCR. –°–æ–ø–æ—Å—Ç–∞–≤—å –µ—ë —Å —Ç–µ–º, —á—Ç–æ –≤–∏–¥–∏—à—å –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏.
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"""
            
            return enhanced_supplement
            
        except Exception as e:
            self.logger.warning(f"Error creating OCR supplement for page {page_number}: {e}")
            return ""
    
    def _get_ocr_summary(self, page_number: int) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–≤–æ–¥–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ OCRmyPDF-EasyOCR."""
        
        try:
            return self.ocr_parser.get_page_summary(page_number)
        except Exception as e:
            self.logger.warning(f"Error getting OCR summary for page {page_number}: {e}")
            return {}
    
    def _extract_with_vision_primary(self, page_number: int, ocr_supplement: str) -> List[Dict[str, Any]]:
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥: GPT-4 Vision –∞–Ω–∞–ª–∏–∑ —Å OCR –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.
        
        Args:
            page_number: –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            ocr_supplement: –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è OCR –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            
        Returns:
            –°–ø–∏—Å–æ–∫ –∏–∑–≤–ª–µ—á—ë–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            page_image = self.pdf_processor.get_page_image(page_number - 1)  # 0-based index
            
            if not page_image:
                self.logger.warning(f"Could not get image for page {page_number}")
                return self._extract_with_ocr_fallback(page_number)
            
            # –°–æ–∑–¥–∞—ë–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å OCR –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
            enhanced_prompt = self._create_hybrid_prompt(ocr_supplement)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ GPT-4 Vision
            self.logger.debug(f"Analyzing page {page_number} with GPT-4 Vision + OCR supplement")
            
            api_result = self.vision_client.extract_tasks_from_page(
                page_image=page_image,
                page_number=page_number,
                custom_prompt=enhanced_prompt
            )
            
            if not api_result.get('success', False):
                self.logger.warning(f"Vision API failed for page {page_number}, using OCR fallback")
                return self._extract_with_ocr_fallback(page_number)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–¥–∞—á–∏ –∏–∑ –æ—Ç–≤–µ—Ç–∞ GPT
            tasks = self.data_extractor.extract_tasks_from_response(
                api_result.get('response', {}),
                page_number
            )
            
            # –û–±–æ–≥–∞—â–∞–µ–º –∑–∞–¥–∞—á–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏ –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞
            for task in tasks:
                task.update({
                    'extraction_method': 'hybrid_vision_primary',
                    'ocr_assisted': True,
                    'ocr_confidence': 100.0,
                    'vision_api_used': True,
                    'hybrid_score': self._calculate_hybrid_score(task, api_result)
                })
            
            self.logger.debug(f"Extracted {len(tasks)} tasks from page {page_number} using hybrid Vision+OCR")
            return tasks
            
        except Exception as e:
            self.logger.error(f"Vision primary extraction failed for page {page_number}: {e}")
            return self._extract_with_ocr_fallback(page_number)
    
    def _extract_with_ocr_fallback(self, page_number: int) -> List[Dict[str, Any]]:
        """
        Fallback –º–µ—Ç–æ–¥: —Ç–æ–ª—å–∫–æ OCRmyPDF-EasyOCR.
        
        Args:
            page_number: –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            
        Returns:
            –°–ø–∏—Å–æ–∫ –∏–∑–≤–ª–µ—á—ë–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
        """
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à –ø—Ä–µ–¥—ã–¥—É—â–∏–π OCR-only —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä
            ocr_page = self.ocr_parser.parse_page(page_number)
            
            if not ocr_page:
                return []
            
            tasks = []
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–¥–∞—á–∏ —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏
            math_blocks = ocr_page.get_math_blocks()
            question_blocks = ocr_page.get_question_blocks()
            
            # Math blocks
            for i, block in enumerate(math_blocks, 1):
                if len(block.text.strip()) > 5:
                    tasks.append({
                        'task_number': f"ocr-math-{i}",
                        'task_text': block.text.strip(),
                        'has_image': self._has_visual_indicators(block.text),
                        'confidence_score': 0.8,
                        'extraction_method': 'hybrid_ocr_fallback',
                        'ocr_assisted': True,
                        'vision_api_used': False,
                        'ocr_confidence': 100.0
                    })
            
            # Question blocks
            for i, block in enumerate(question_blocks, 1):
                questions = self._split_questions(block.text)
                for j, question in enumerate(questions, 1):
                    if len(question.strip()) > 5:
                        tasks.append({
                            'task_number': f"ocr-question-{i}-{j}",
                            'task_text': question.strip(),
                            'has_image': self._has_visual_indicators(question),
                            'confidence_score': 0.85,
                            'extraction_method': 'hybrid_ocr_fallback',
                            'ocr_assisted': True,
                            'vision_api_used': False,
                            'ocr_confidence': 100.0
                        })
            
            # –ï—Å–ª–∏ –∑–∞–¥–∞—á –º–∞–ª–æ, –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—â–µ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            if len(tasks) < 3 and ocr_page.text.strip():
                tasks.append({
                    'task_number': f"ocr-content-1",
                    'task_text': ocr_page.text.strip()[:300],
                    'has_image': self._has_visual_indicators(ocr_page.text),
                    'confidence_score': 0.6,
                    'extraction_method': 'hybrid_ocr_fallback_content',
                    'ocr_assisted': True,
                    'vision_api_used': False,
                    'ocr_confidence': 100.0
                })
            
            self.logger.debug(f"OCR fallback extracted {len(tasks)} tasks from page {page_number}")
            return tasks
            
        except Exception as e:
            self.logger.error(f"OCR fallback extraction failed for page {page_number}: {e}")
            return []
    
    def _create_hybrid_prompt(self, ocr_supplement: str) -> str:
        """–°–æ–∑–¥–∞—ë—Ç –≥–∏–±—Ä–∏–¥–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è GPT-4 Vision —Å OCR –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π."""
        
        base_prompt = """–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç—É —Å—Ç—Ä–∞–Ω–∏—Ü—É –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É—á–µ–±–Ω–∏–∫–∞ –¥–ª—è 1 –∫–ª–∞—Å—Å–∞ –∏ –∏–∑–≤–ª–µ–∫–∏ –≤—Å–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏.

–¢–í–û–Ø –ó–ê–î–ê–ß–ê:
1. –ù–∞–π–¥–∏ –∏ –∏–∑–≤–ª–µ–∫–∏ –í–°–ï –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏, —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –∏ –≤–æ–ø—Ä–æ—Å—ã
2. –î–ª—è –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–∏ –æ–ø—Ä–µ–¥–µ–ª–∏:
   - –ù–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å) –∏–ª–∏ —Å–æ–∑–¥–∞–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä
   - –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏
   - –ï—Å—Ç—å –ª–∏ –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã (—Ä–∏—Å—É–Ω–∫–∏, —Å—Ö–µ–º—ã)

–§–û–†–ú–ê–¢–´ –ó–ê–î–ê–ß:
- –í–æ–ø—Ä–æ—Å—ã: "–°–∫–æ–ª—å–∫–æ...?", "–ì–¥–µ...?", "–ß—Ç–æ...?"
- –ö–æ–º–∞–Ω–¥—ã: "–ü–æ–∫–∞–∂–∏...", "–ù–∞–π–¥–∏...", "–†–µ—à–∏...", "–ü–æ–ª–æ–∂–∏..."
- –ü—Ä–∏–º–µ—Ä—ã: –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
- –°—Ä–∞–≤–Ω–µ–Ω–∏—è: "–±–æ–ª—å—à–µ/–º–µ–Ω—å—à–µ", "–¥–ª–∏–Ω–Ω–µ–µ/–∫–æ—Ä–æ—á–µ"

–í–ï–†–ù–ò –†–ï–ó–£–õ–¨–¢–ê–¢ –í –§–û–†–ú–ê–¢–ï JSON:
{
  "tasks": [
    {
      "task_number": "1",
      "task_text": "–ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏",
      "has_image": true/false
    }
  ]
}"""

        if ocr_supplement:
            hybrid_prompt = f"""{base_prompt}

{ocr_supplement}

–í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–π OCR –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤—ã—à–µ –∫–∞–∫ —Ç–æ—á–Ω—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏. –û–Ω–∞ –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —Ç–æ—á–Ω–æ –ø—Ä–æ—á–∏—Ç–∞—Ç—å –¥–∞–∂–µ —Å–ª–æ–∂–Ω—ã–µ —Å–ª–æ–≤–∞ –∏ —Å–∏–º–≤–æ–ª—ã."""
        else:
            hybrid_prompt = base_prompt
        
        return hybrid_prompt
    
    def _calculate_hybrid_score(self, task: Dict[str, Any], api_result: Dict[str, Any]) -> float:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –≥–∏–±—Ä–∏–¥–Ω—ã–π score –∫–∞—á–µ—Å—Ç–≤–∞ –∑–∞–¥–∞—á–∏."""
        
        score = 0.5  # –ë–∞–∑–æ–≤—ã–π score
        
        # –ë–æ–Ω—É—Å –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Vision API
        if api_result.get('success', False):
            score += 0.2
        
        # –ë–æ–Ω—É—Å –∑–∞ –Ω–∞–ª–∏—á–∏–µ OCR –ø–æ–¥–¥–µ—Ä–∂–∫–∏
        if task.get('ocr_assisted', False):
            score += 0.2
        
        # –ë–æ–Ω—É—Å –∑–∞ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        task_text = task.get('task_text', '').lower()
        math_keywords = ['—Å–∫–æ–ª—å–∫–æ', '–Ω–∞–π–¥–∏', '—Ä–µ—à–∏', '–ø–æ–∫–∞–∂–∏', '–ø–æ–ª–æ–∂–∏', '?']
        keyword_count = sum(1 for keyword in math_keywords if keyword in task_text)
        score += min(keyword_count * 0.05, 0.15)
        
        return min(score, 1.0)
    
    def _has_visual_indicators(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ."""
        visual_keywords = [
            '—Ä–∏—Å—É–Ω', '–∫–∞—Ä—Ç–∏–Ω', '—Å—Ö–µ–º', '–¥–∏–∞–≥—Ä–∞–º–º', '–≥—Ä–∞—Ñ–∏–∫', '—á–µ—Ä—Ç—ë–∂',
            '–ø–æ–∫–∞–∂–∏', '–Ω–∞—Ä–∏—Å–æ–≤–∞–Ω–æ', '–∏–∑–æ–±—Ä–∞–∂', '–≤–∏–¥–∏—à—å', '–Ω–∞—Ä–∏—Å—É–π',
            '–ø–∞–ª–æ—á–∫', '–∫—Ä—É–∂–∫–æ–≤', '—Ç–æ—á–µ–∫', '–ª–∏–Ω–∏–π', '—Ñ–∏–≥—É—Ä'
        ]
        text_lower = text.lower()
        return any(keyword in text_lower for keyword in visual_keywords)
    
    def _split_questions(self, text: str) -> List[str]:
        """–†–∞–∑–±–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã."""
        questions = re.split(r'\?+', text)
        result = []
        for i, q in enumerate(questions[:-1]):
            q = q.strip()
            if q:
                result.append(q + '?')
        return result


class HybridIntermediateStorage:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –¥–ª—è –≥–∏–±—Ä–∏–¥–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã."""
    
    def __init__(self, storage_dir: Path):
        self.storage_dir = storage_dir
        self.storage_dir.mkdir(parents=True, exist_ok=True)
        
    def save_page_result(self, page_number: int, page_data: Dict[str, Any]) -> None:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≥–∏–±—Ä–∏–¥–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã."""
        file_path = self.storage_dir / f"hybrid_page_{page_number:03d}.json"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞
        page_data.update({
            'processed_at': datetime.now().isoformat(),
            'page_number': page_number,
            'storage_version': '3.0-hybrid-vision-easyocr',
            'architecture': 'vision_primary_ocr_supplementary'
        })
        
        with open(file_path, 'w', encoding='utf-8') as f:
            json.dump(page_data, f, ensure_ascii=False, indent=2)
    
    def load_page_result(self, page_number: int) -> Optional[Dict[str, Any]]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≥–∏–±—Ä–∏–¥–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã."""
        file_path = self.storage_dir / f"hybrid_page_{page_number:03d}.json"
        
        if not file_path.exists():
            return None
            
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                return json.load(f)
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–∏–±—Ä–∏–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page_number}: {e}")
            return None
    
    def get_processed_pages(self) -> List[int]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–æ–º–µ—Ä–æ–≤ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü."""
        processed = []
        
        for file_path in sorted(self.storage_dir.glob("hybrid_page_*.json")):
            try:
                page_num = int(file_path.stem.split('_')[2])
                processed.append(page_num)
            except (ValueError, IndexError):
                continue
                
        return sorted(processed)
    
    def load_all_results(self) -> List[Dict[str, Any]]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –≥–∏–±—Ä–∏–¥–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã."""
        results = []
        
        for page_num in self.get_processed_pages():
            page_data = self.load_page_result(page_num)
            if page_data:
                results.append(page_data)
        
        return results
    
    def clear_storage(self) -> None:
        """–û—á–∏—â–∞–µ—Ç –≤—Å–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ñ–∞–π–ª—ã –≥–∏–±—Ä–∏–¥–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã."""
        for file_path in self.storage_dir.glob("hybrid_page_*.json"):
            file_path.unlink()


@click.command()
@click.argument('pdf_file', type=click.Path(exists=True))
@click.argument('ocr_file', type=click.Path(exists=True))
@click.argument('output_csv', type=click.Path())
@click.option('--force', is_flag=True, help='–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã')
@click.option('--start-page', type=int, default=1, help='–ù–∞—á–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏')
@click.option('--end-page', type=int, default=None, help='–ö–æ–Ω–µ—á–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏')
@click.option('--production', is_flag=True, help='Production —Ä–µ–∂–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è')
@click.option('--verbose', is_flag=True, help='–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥')
@click.option('--config', type=click.Path(exists=True), help='–ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É')
def process_textbook_hybrid(pdf_file, ocr_file, output_csv, force, start_page, end_page, production, verbose, config):
    """
    OCR-OCD Ultimate Hybrid: GPT-4 Vision + OCRmyPDF-EasyOCR.
    
    –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –≥–∏–±—Ä–∏–¥–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:
    - GPT-4 Vision: –æ—Å–Ω–æ–≤–Ω–æ–π –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    - OCRmyPDF-EasyOCR: –≤—ã—Å–æ–∫–æ—Ç–æ—á–Ω–∞—è –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    """
    
    print("üöÄüß† OCR-OCD Ultimate Hybrid: Vision + EasyOCR")
    print("=" * 65)
    print(f"üìñ PDF —Ñ–∞–π–ª: {pdf_file}")
    print(f"üîç OCRmyPDF-EasyOCR —Ñ–∞–π–ª: {ocr_file}")
    print(f"üìä –í—ã–≤–æ–¥: {output_csv}")
    print(f"üîÑ Force —Ä–µ–∂–∏–º: {'‚úÖ' if force else '‚ùå'}")
    print(f"üéØ –ì–∏–±—Ä–∏–¥–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: ‚úÖ")
    print(f"üñºÔ∏è GPT-4 Vision: –æ—Å–Ω–æ–≤–Ω–æ–π –∞–Ω–∞–ª–∏–∑")
    print(f"üìã EasyOCR: –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    if production:
        setup_production_logger()
    else:
        setup_development_logger()
    
    logger = get_logger(__name__)
    
    # –°–æ–∑–¥–∞—ë–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    paths = {
        'output': Path("output"),
        'temp': Path("temp"), 
        'logs': Path("logs"),
        'storage': Path("temp/processed_pages_hybrid")
    }
    
    for path in paths.values():
        path.mkdir(parents=True, exist_ok=True)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    storage = HybridIntermediateStorage(paths['storage'])
    
    if force:
        print("üóëÔ∏è  Force —Ä–µ–∂–∏–º: –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
        storage.clear_storage()
    
    start_time = datetime.now()
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä–∞
        print(f"üß† –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä–∞...")
        extractor = UltimateHybridExtractor(pdf_file, ocr_file, config)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ PDF
        total_pages = extractor.pdf_processor.get_page_count()
        
        if end_page is None:
            end_page = total_pages
        else:
            end_page = min(end_page, total_pages)
        
        print(f"‚úÖ –ì–∏–±—Ä–∏–¥–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        print(f"üìö PDF: {total_pages} —Å—Ç—Ä–∞–Ω–∏—Ü")
        print(f"üéØ –û–±—Ä–∞–±–æ—Ç–∫–∞: —Å—Ç—Ä–∞–Ω–∏—Ü—ã {start_page}-{end_page}")
        print(f"üñºÔ∏è GPT-4 Vision API: {'‚úÖ Available' if extractor.api_available else '‚ùå Unavailable (OCR fallback)'}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        processed_pages = set(storage.get_processed_pages())
        
        if processed_pages and not force:
            print(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(processed_pages)} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü")
            print(f"üìä –ü–æ—Å–ª–µ–¥–Ω—è—è: {max(processed_pages) if processed_pages else 'none'}")
        
        # –°—á—ë—Ç—á–∏–∫–∏
        processed_count = 0
        skipped_count = 0 
        error_count = 0
        total_tasks = 0
        vision_count = 0
        ocr_fallback_count = 0
        
        print(f"\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º –≥–∏–±—Ä–∏–¥–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É...")
        
        for page_num in range(start_page, end_page + 1):
            page_start_time = time.time()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É
            if not force and page_num in processed_pages:
                skipped_count += 1
                if verbose:
                    print(f"‚è≠Ô∏è  –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num}: –ø—Ä–æ–ø—É—â–µ–Ω–∞ (—É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞)")
                continue
            
            try:
                progress = (page_num - start_page + 1) / (end_page - start_page + 1) * 100
                print(f"\nüìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num}/{end_page} ({progress:.1f}%)")
                
                # –ì–∏–±—Ä–∏–¥–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
                if verbose:
                    print(f"  üß† –ì–∏–±—Ä–∏–¥–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (Vision+OCR)...")
                
                result = extractor.extract_tasks_from_page(page_num)
                
                if 'error' in result:
                    error_count += 1
                    print(f"     ‚ùå –û—à–∏–±–∫–∞: {result['error']}")
                    continue
                
                tasks = result['tasks']
                method = result.get('method', 'unknown')
                api_used = result.get('api_available', False)
                ocr_summary = result.get('ocr_summary', {})
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á—ë—Ç—á–∏–∫–∏ –º–µ—Ç–æ–¥–æ–≤
                if api_used and 'vision' in method:
                    vision_count += 1
                else:
                    ocr_fallback_count += 1
                
                if verbose:
                    print(f"  ‚úÖ –ì–∏–±—Ä–∏–¥–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω")
                    print(f"  üéØ –ú–µ—Ç–æ–¥: {method}")
                    print(f"  üìä OCR –∫–∞—á–µ—Å—Ç–≤–æ: {ocr_summary.get('avg_confidence', 0)}%")
                    print(f"  üîß API –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω: {'‚úÖ' if api_used else '‚ùå'}")
                
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                page_result = {
                    'page_number': page_num,
                    'tasks': tasks,
                    'processing_time': result['processing_time'],
                    'method': method,
                    'api_available': result.get('api_available', False),
                    'ocr_summary': ocr_summary,
                    'task_count': len(tasks),
                    'hybrid_approach': result.get('hybrid_approach', 'unknown')
                }
                
                storage.save_page_result(page_num, page_result)
                
                processed_count += 1
                total_tasks += len(tasks)
                
                processing_time = time.time() - page_start_time
                print(f"     ‚úÖ –ó–∞–¥–∞—á: {len(tasks)}, –í—Ä–µ–º—è: {processing_time:.2f}s")
                
                if verbose and tasks:
                    for i, task in enumerate(tasks[:3], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                        method_info = task.get('extraction_method', 'unknown')
                        vision_used = 'üñºÔ∏è' if task.get('vision_api_used', False) else 'üìã'
                        print(f"       {i}. {vision_used} [{method_info}] {task['task_number']}: {task['task_text'][:50]}...")
                
                # –ü–∞—É–∑–∞ –¥–ª—è API
                time.sleep(0.1)
                
            except Exception as e:
                logger.error(f"Error processing page {page_num}: {e}")
                print(f"     ‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page_num}: {e}")
                error_count += 1
                continue
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π —Å–±–æ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        print(f"\nüíæ –°–±–æ—Ä —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –≥–∏–±—Ä–∏–¥–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
        all_results = storage.load_all_results()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ CSV
        if all_results:
            print(f"üìä –°–æ–∑–¥–∞–Ω–∏–µ –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ CSV —Ñ–∞–π–ª–∞...")
            create_hybrid_csv(all_results, output_csv)
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_time = (datetime.now() - start_time).total_seconds()
        
        print(f"\nüéâ –ì–ò–ë–†–ò–î–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
        print(f"=" * 55)
        print(f"üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   üìö –°—Ç—Ä–∞–Ω–∏—Ü –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed_count}")
        print(f"   ‚è≠Ô∏è  –°—Ç—Ä–∞–Ω–∏—Ü –ø—Ä–æ–ø—É—â–µ–Ω–æ: {skipped_count}")
        print(f"   ‚ùå –û—à–∏–±–æ–∫: {error_count}")
        print(f"   üìù –ó–∞–¥–∞—á –∏–∑–≤–ª–µ—á–µ–Ω–æ: {total_tasks}")
        print(f"   ‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.1f}s ({total_time/60:.1f} –º–∏–Ω—É—Ç)")
        if processed_count > 0:
            print(f"   ‚ö° –°–∫–æ—Ä–æ—Å—Ç—å: {processed_count/total_time*60:.1f} —Å—Ç—Ä–∞–Ω–∏—Ü/–º–∏–Ω—É—Ç—É")
            print(f"   üìà –°—Ä–µ–¥–Ω–µ–µ –∑–∞–¥–∞—á/—Å—Ç—Ä–∞–Ω–∏—Ü–∞: {total_tasks/processed_count:.1f}")
        
        print(f"\nüß† –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥–∏–±—Ä–∏–¥–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤:")
        print(f"   üñºÔ∏è GPT-4 Vision (–æ—Å–Ω–æ–≤–Ω–æ–π): {vision_count} —Å—Ç—Ä–∞–Ω–∏—Ü")
        print(f"   üìã OCR Fallback: {ocr_fallback_count} —Å—Ç—Ä–∞–Ω–∏—Ü")
        
        print(f"\nüìÅ –ì–∏–±—Ä–∏–¥–Ω—ã–π CSV: {output_csv}")
        print(f"üéØ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: Vision Primary + OCR Supplementary")
        
        return True
        
    except Exception as e:
        logger.error(f"Critical hybrid error: {e}")
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≥–∏–±—Ä–∏–¥–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã: {e}")
        return False


def create_hybrid_csv(results: List[Dict], output_path: str) -> None:
    """–°–æ–∑–¥–∞—ë—Ç –≥–∏–±—Ä–∏–¥–Ω—ã–π CSV —Ñ–∞–π–ª –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤."""
    
    all_tasks = []
    
    for page_result in results:
        page_num = page_result['page_number']
        processing_time = page_result.get('processing_time', 0)
        method = page_result.get('method', 'unknown')
        api_available = page_result.get('api_available', False)
        ocr_summary = page_result.get('ocr_summary', {})
        hybrid_approach = page_result.get('hybrid_approach', 'unknown')
        
        for task_data in page_result.get('tasks', []):
            task_row = {
                'page_number': page_num,
                'task_number': task_data.get('task_number', 'unknown'),
                'task_text': task_data.get('task_text', ''),
                'has_image': task_data.get('has_image', False),
                'confidence_score': task_data.get('confidence_score', 0.0),
                'processing_time': processing_time,
                'api_method': method,
                'extraction_method': task_data.get('extraction_method', 'unknown'),
                'hybrid_approach': hybrid_approach,
                'vision_api_used': task_data.get('vision_api_used', False),
                'ocr_assisted': task_data.get('ocr_assisted', False),
                'ocr_confidence': task_data.get('ocr_confidence', 0),
                'hybrid_score': task_data.get('hybrid_score', 0.0),
                'api_available': api_available,
                'page_ocr_words': ocr_summary.get('total_words', 0),
                'page_ocr_blocks': ocr_summary.get('total_blocks', 0),
                'extracted_at': page_result.get('processed_at', ''),
                'word_count': len(task_data.get('task_text', '').split()),
                'system_type': 'hybrid_vision_easyocr_gpu',
                'architecture': 'vision_primary_ocr_supplementary'
            }
            all_tasks.append(task_row)
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –Ω–æ–º–µ—Ä—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –≥–∏–±—Ä–∏–¥–Ω–æ–º—É score
    all_tasks.sort(key=lambda x: (x['page_number'], -x['hybrid_score']))
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º CSV
    import csv
    with open(output_path, 'w', newline='', encoding='utf-8') as f:
        if all_tasks:
            fieldnames = list(all_tasks[0].keys())
            writer = csv.DictWriter(f, fieldnames=fieldnames)
            writer.writeheader()
            writer.writerows(all_tasks)
    
    print(f"‚úÖ –ì–∏–±—Ä–∏–¥–Ω—ã–π CSV —Å–æ–∑–¥–∞–Ω: {len(all_tasks)} –∑–∞–¥–∞—á —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
    print(f"üìä –ü–æ–ª—è: hybrid_approach, vision_api_used, ocr_assisted, hybrid_score")


if __name__ == "__main__":
    process_textbook_hybrid() 