#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç OCR-OCD —Å mock API
========================================

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É OCR-OCD —Å —Å–∏–º—É–ª—è—Ü–∏–µ–π API –æ—Ç–≤–µ—Ç–æ–≤
–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ–≥–æ pipeline –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ OpenAI API –∫–ª—é—á–∞.
"""

import sys
import json
import time
from pathlib import Path
from unittest.mock import Mock, patch

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ Python path
sys.path.insert(0, str(Path(__file__).parent / "src"))

from src.core.pdf_processor import PDFProcessor
from src.core.data_extractor import DataExtractor
from src.core.csv_writer import CSVWriter
from src.utils.logger import setup_development_logger, get_logger


def create_mock_api_response(page_number: int) -> str:
    """–°–æ–∑–¥–∞—ë—Ç mock –æ—Ç–≤–µ—Ç –æ—Ç API –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏."""
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –∑–∞–¥–∞—á –¥–ª—è –∏—Å—Ç–æ—Ä–∏—á—Å–∫–æ–≥–æ —É—á–µ–±–Ω–∏–∫–∞ 1959 –≥–æ–¥–∞
    if page_number == 1:
        # –ü—Ä–æ—Å—Ç—ã–µ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏
        tasks = [
            {
                "task_number": "1",
                "task_text": "–°–∫–æ–ª—å–∫–æ —è–±–ª–æ–∫ –Ω–∞ —Ä–∏—Å—É–Ω–∫–µ?",
                "has_image": True,
                "confidence": 0.95
            },
            {
                "task_number": "2", 
                "task_text": "–ü–æ—Å—á–∏—Ç–∞–π –æ—Ç 1 –¥–æ 5",
                "has_image": False,
                "confidence": 0.92
            }
        ]
    elif page_number == 2:
        # –ó–∞–¥–∞—á–∏ —Å —á–∏—Å–ª–∞–º–∏
        tasks = [
            {
                "task_number": "3",
                "task_text": "–ó–∞–ø–∏—à–∏ —á–∏—Å–ª–æ —Å–µ–º—å —Ü–∏—Ñ—Ä–∞–º–∏",
                "has_image": False,
                "confidence": 0.88
            },
            {
                "task_number": "4",
                "task_text": "–°—Ä–∞–≤–Ω–∏ —á–∏—Å–ª–∞: 5 ... 3",
                "has_image": False,
                "confidence": 0.90
            },
            {
                "task_number": "5",
                "task_text": "–†–µ—à–∏: 2 + 3 = ?",
                "has_image": False,
                "confidence": 0.93
            }
        ]
    else:
        # –ë–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏
        tasks = [
            {
                "task_number": "unknown",  # –¢–µ—Å—Ç unknown –Ω–æ–º–µ—Ä–æ–≤
                "task_text": "–í –∫–æ—Ä–∑–∏–Ω–µ –ª–µ–∂–∞–ª–æ 8 —è–±–ª–æ–∫. –í–∑—è–ª–∏ 3 —è–±–ª–æ–∫–∞. –°–∫–æ–ª—å–∫–æ —è–±–ª–æ–∫ –æ—Å—Ç–∞–ª–æ—Å—å?",
                "has_image": True,
                "confidence": 0.85
            }
        ]
    
    response = {
        "page_number": page_number,
        "tasks": tasks,
        "page_info": {
            "total_tasks": len(tasks),
            "content_type": "arithmetic_exercises",
            "processing_notes": f"Mock response for page {page_number}"
        }
    }
    
    return json.dumps(response, ensure_ascii=False)


def test_pdf_processing_pipeline():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π pipeline –æ–±—Ä–∞–±–æ—Ç–∫–∏ PDF."""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ PDF Processing Pipeline")
    print("=" * 50)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    setup_development_logger()
    logger = get_logger(__name__)
    
    pdf_path = "/home/vorontsovie/programming/math_textbooks/1_klass_Arifmetika(1959)(Polyak_Pchelko).pdf"
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PDF –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
        print("üìÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PDF –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞...")
        pdf_processor = PDFProcessor(
            pdf_path=pdf_path,
            temp_dir=Path("temp"),
            dpi=300,
            image_format="PNG"
        )
        
        print("üìä –ó–∞–≥—Ä—É–∑–∫–∞ PDF —Ñ–∞–π–ª–∞...")
        with pdf_processor:
            pdf_processor.load_pdf()
            total_pages = pdf_processor.get_page_count()
            
            print(f"‚úÖ PDF –∑–∞–≥—Ä—É–∂–µ–Ω: {total_pages} —Å—Ç—Ä–∞–Ω–∏—Ü")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 3 —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            test_pages = min(3, total_pages)
            print(f"üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ {test_pages} —Å—Ç—Ä–∞–Ω–∏—Ü...")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è data extractor
            data_extractor = DataExtractor()
            all_pages = []
            
            for page_num in range(test_pages):
                start_time = time.time()
                
                print(f"\nüìñ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page_num + 1}:")
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                print("  üñºÔ∏è  –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
                image_data = pdf_processor.convert_page_to_image(page_num)
                print(f"     –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {len(image_data):,} –±–∞–π—Ç")
                
                # –°–∏–º—É–ª—è—Ü–∏—è API –≤—ã–∑–æ–≤–∞
                print("  ü§ñ –°–∏–º—É–ª—è—Ü–∏—è API –≤—ã–∑–æ–≤–∞...")
                mock_response = create_mock_api_response(page_num + 1)
                parsed_response = json.loads(mock_response)
                
                # –°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                image_info = {
                    "size_bytes": len(image_data),
                    "format": "PNG",
                    "max_dimension": 2048
                }
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
                print("  üìã –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–∞–¥–∞—á...")
                page = data_extractor.parse_api_response(
                    parsed_response,
                    page_num + 1,
                    start_time,
                    image_info
                )
                
                all_pages.append(page)
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                processing_time = time.time() - start_time
                print(f"     –ó–∞–¥–∞—á –∏–∑–≤–ª–µ—á–µ–Ω–æ: {len(page.tasks)}")
                print(f"     –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_time:.2f}s")
                
                # –î–µ—Ç–∞–ª–∏ –∑–∞–¥–∞—á
                for i, task in enumerate(page.tasks, 1):
                    print(f"     –ó–∞–¥–∞—á–∞ {i}: {task.task_number} - {task.task_text[:50]}...")
                    print(f"       –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {'–î–∞' if task.has_image else '–ù–µ—Ç'}")
                    print(f"       Confidence: {task.confidence_score:.2f}")
            
            # –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV
            print(f"\nüíæ –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV...")
            csv_writer = CSVWriter("output/demo_test_results.csv")
            
            export_result = csv_writer.write_tasks(all_pages, include_metadata=True)
            
            print(f"‚úÖ CSV —ç–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à—ë–Ω:")
            print(f"   –§–∞–π–ª: {export_result['output_file']}")
            print(f"   –ó–∞–¥–∞—á —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {export_result['tasks_exported']}")
            print(f"   –°—Ç—Ä–∞–Ω–∏—Ü –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {export_result['pages_processed']}")
            print(f"   –í—ã—Å–æ–∫–æ–µ confidence: {export_result['high_confidence_tasks']}")
            print(f"   Unknown –Ω–æ–º–µ—Ä–∞: {export_result['unknown_numbered_tasks']}")
            print(f"   –° –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏: {export_result['tasks_with_images']}")
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á—ë—Ç–∞
            print(f"\nüìä –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞...")
            report = csv_writer.create_export_report(all_pages)
            
            with open("output/demo_report.txt", "w", encoding="utf-8") as f:
                f.write(report)
            
            print("‚úÖ –û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ output/demo_report.txt")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ session
            stats = data_extractor.get_session_statistics()
            print(f"\nüèÜ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–∏:")
            print(f"   –í—Å–µ–≥–æ –∑–∞–¥–∞—á –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {stats['total_tasks_processed']}")
            print(f"   Unknown –Ω–æ–º–µ—Ä–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: {stats['unknown_tasks_generated']}")
            print(f"   –û—á–∏—Å—Ç–æ–∫ —Ç–µ–∫—Å—Ç–∞: {stats['text_cleanups_performed']}")
            print(f"   –û—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {stats['validation_errors']}")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ pipeline: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False
    
    print(f"\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
    return True


def test_data_quality_analysis():
    """–ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –∏–∑–≤–ª–µ—á—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
    
    print("\nüîç –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö")
    print("=" * 30)
    
    try:
        import pandas as pd
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        df = pd.read_csv("output/demo_test_results.csv")
        
        print(f"üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(df)}")
        print(f"   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü: {df['page_number'].nunique()}")
        print(f"   –°—Ä–µ–¥–Ω–µ–µ –∑–∞–¥–∞—á –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É: {len(df) / df['page_number'].nunique():.1f}")
        
        if 'confidence_score' in df.columns:
            avg_confidence = df['confidence_score'].mean()
            high_confidence = (df['confidence_score'] > 0.8).sum()
            print(f"\nüéØ –ö–∞—á–µ—Å—Ç–≤–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è:")
            print(f"   –°—Ä–µ–¥–Ω–∏–π confidence: {avg_confidence:.3f}")
            print(f"   –í—ã—Å–æ–∫–æ–µ confidence (>0.8): {high_confidence}/{len(df)} ({high_confidence/len(df)*100:.1f}%)")
        
        # –ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–æ–≤ –∑–∞–¥–∞—á
        unknown_tasks = df['task_number'].str.startswith('unknown-').sum()
        print(f"\nüî¢ –ê–Ω–∞–ª–∏–∑ –Ω—É–º–µ—Ä–∞—Ü–∏–∏:")
        print(f"   Unknown –Ω–æ–º–µ—Ä–∞: {unknown_tasks}/{len(df)} ({unknown_tasks/len(df)*100:.1f}%)")
        
        with_images = df['has_image'].sum()
        print(f"\nüñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:")
        print(f"   –ó–∞–¥–∞—á —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏: {with_images}/{len(df)} ({with_images/len(df)*100:.1f}%)")
        
        if 'word_count' in df.columns:
            avg_words = df['word_count'].mean()
            print(f"\nüìù –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞:")
            print(f"   –°—Ä–µ–¥–Ω–µ–µ —Å–ª–æ–≤ –≤ –∑–∞–¥–∞—á–µ: {avg_words:.1f}")
        
        print("‚úÖ –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –∑–∞–≤–µ—Ä—à—ë–Ω")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏."""
    
    print("üîçüìö OCR-OCD Demo Test")
    print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–º —É—á–µ–±–Ω–∏–∫–µ –∞—Ä–∏—Ñ–º–µ—Ç–∏–∫–∏ 1959 –≥–æ–¥–∞")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞—ë–º –≤—ã—Ö–æ–¥–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    Path("output").mkdir(exist_ok=True)
    Path("temp").mkdir(exist_ok=True)
    Path("logs").mkdir(exist_ok=True)
    
    # –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
    success = test_pdf_processing_pipeline()
    
    if success:
        # –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö
        test_data_quality_analysis()
        
        print(f"\nüéØ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        print(f"‚úÖ PDF –æ–±—Ä–∞–±–æ—Ç–∫–∞: –£–°–ü–ï–®–ù–û")
        print(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–∞–¥–∞—á: –£–°–ü–ï–®–ù–û") 
        print(f"‚úÖ CSV —ç–∫—Å–ø–æ—Ä—Ç: –£–°–ü–ï–®–ù–û")
        print(f"‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ: –£–°–ü–ï–®–ù–û")
        print(f"‚úÖ Error handling: –ü–†–û–¢–ï–°–¢–ò–†–û–í–ê–ù–û")
        
        print(f"\nüìÅ –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:")
        print(f"   üìÑ output/demo_test_results.csv - –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ CSV")
        print(f"   üìä output/demo_report.txt - –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç")
        print(f"   üìù logs/ - –§–∞–π–ª—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è")
        
        print(f"\nüöÄ OCR-OCD –≥–æ—Ç–æ–≤ –∫ production –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
        
    else:
        print(f"‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å")


if __name__ == "__main__":
    main() 