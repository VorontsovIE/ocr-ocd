#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Gemini API
"""

import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ Python path
sys.path.insert(0, str(Path(__file__).parent / "src"))

from dotenv import load_dotenv
from src.utils.config import load_config, get_available_providers
from src.core.vision_adapters import VisionAdapterFactory, VisionProvider
from src.utils.logger import setup_development_logger


def test_gemini_setup():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É Gemini API"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Gemini API")
    print("=" * 40)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    load_dotenv()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
    gemini_key = os.getenv("GEMINI_API_KEY")
    if not gemini_key:
        print("‚ùå GEMINI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
        return False
    
    print(f"‚úÖ GEMINI_API_KEY –Ω–∞–π–¥–µ–Ω: {gemini_key[:10]}...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã
    try:
        available_providers = get_available_providers()
        print(f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã: {[p.value for p in available_providers]}")
        
        if VisionProvider.GEMINI in available_providers:
            print("‚úÖ Gemini –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤")
        else:
            print("‚ùå Gemini –ù–ï –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤: {e}")
        return False
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    try:
        config = load_config()
        print(f"üéØ –ü—Ä–æ–≤–∞–π–¥–µ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {config.api.provider.value}")
        print(f"üîß –ú–æ–¥–µ–ª—å: {config.api.model_name}")
        
        if config.api.provider == VisionProvider.GEMINI:
            print("‚úÖ Gemini –≤—ã–±—Ä–∞–Ω –∫–∞–∫ –ø—Ä–æ–≤–∞–π–¥–µ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
        else:
            print(f"‚ö†Ô∏è  –ü—Ä–æ–≤–∞–π–¥–µ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {config.api.provider.value}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∞–¥–∞–ø—Ç–µ—Ä–∞
    try:
        adapter = VisionAdapterFactory.create_adapter(VisionProvider.GEMINI, config.api)
        print("‚úÖ –ê–¥–∞–ø—Ç–µ—Ä Gemini —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        test_result = adapter.test_connection()
        
        if test_result.get("status") == "success":
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Gemini API —É—Å–ø–µ—à–Ω–æ")
            print(f"   –ú–æ–¥–µ–ª—å: {test_result.get('model_used')}")
            print(f"   –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {test_result.get('processing_time', 0):.2f}—Å")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Gemini API: {test_result.get('error')}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏/—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∞–¥–∞–ø—Ç–µ—Ä–∞: {e}")
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    setup_development_logger()
    
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Gemini API")
    print("=" * 50)
    
    success = test_gemini_setup()
    
    print("\n" + "=" * 50)
    if success:
        print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! Gemini API –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.")
        print("\nüí° –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å:")
        print("   python process_pure_vision_fixed.py input.pdf output.csv")
        print("   –∏–ª–∏")
        print("   python process_pure_vision_fixed.py input.pdf output.csv --provider gemini")
    else:
        print("‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π Gemini API.")
        print("\nüîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
        print("   1. –§–∞–π–ª .env —Å–æ–¥–µ—Ä–∂–∏—Ç GEMINI_API_KEY")
        print("   2. API –∫–ª—é—á –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω")
        print("   3. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install google-generativeai")
    
    return 0 if success else 1


if __name__ == "__main__":
    exit(main()) 